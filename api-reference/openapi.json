{
  "components": {
    "parameters": {
      "ClientIPAddress": {
        "description": "Client IP address forwarded by the application.",
        "in": "header",
        "name": "X-Application-Forwarded-Client-IP-Address",
        "required": true,
        "schema": { "type": "string" }
      },
      "ClientUserAgent": {
        "description": "Client User-Agent forwarded by the application.",
        "in": "header",
        "name": "X-Application-Forwarded-Client-User-Agent",
        "required": true,
        "schema": { "type": "string" }
      },
      "page": {
        "description": "Page number for pagination",
        "in": "query",
        "name": "page",
        "schema": { "type": "integer" }
      },
      "per_page": {
        "description": "Number of items per page for pagination",
        "in": "query",
        "name": "per_page",
        "schema": { "type": "integer" }
      },
      "sort_by": {
        "description": "Key for sorting or random.",
        "in": "query",
        "name": "sort_by",
        "schema": { "type": "string" }
      }
    },
    "schemas": {
      "ApiKey": {
        "properties": {
          "api_key_creation_datetime": {
            "example": "2023-09-14T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "api_key_id": { "example": 1, "type": "integer" },
          "api_key_label": { "example": "My Application", "type": "string" },
          "api_key_last_update_datetime": {
            "example": "2023-09-15T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "api_key_private_key_preview": {
            "example": "abc1234***",
            "type": "string"
          },
          "api_key_public_key": {
            "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
            "type": "string"
          },
          "api_key_scope": { "example": "", "type": "string" },
          "api_key_status": {
            "enum": ["active", "deleted"],
            "example": "active",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeySuccessfulDeleteResponse": {
        "description": "ApiKey deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "ApiKey deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted ApiKey IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeySuccessfulRetrieveResponse": {
        "description": "ApiKey retrieve was successful.",
        "example": {
          "data": {
            "api_key_creation_datetime": "2023-09-14T18:30:00Z",
            "api_key_id": "1",
            "api_key_label": "My Application",
            "api_key_last_update_datetime": "2023-09-15T18:30:00Z",
            "api_key_private_key_preview": "abc1234***",
            "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
            "api_key_scope": { "operation_type": "all", "operations": "all" },
            "api_key_status": "active"
          },
          "message": "ApiKey successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved ApiKey item details.",
            "properties": {
              "api_key_creation_datetime": {
                "example": "2023-09-14T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "api_key_id": { "example": 1, "type": "integer" },
              "api_key_label": {
                "example": "My Application",
                "type": "string"
              },
              "api_key_last_update_datetime": {
                "example": "2023-09-15T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "api_key_private_key_preview": {
                "example": "abc1234***",
                "type": "string"
              },
              "api_key_public_key": {
                "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
                "type": "string"
              },
              "api_key_scope": { "example": "", "type": "string" },
              "api_key_status": {
                "enum": ["active", "deleted"],
                "example": "active",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiKeySuccessfulSearchResponse": {
        "description": "ApiKey search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "api_key_creation_datetime": "2023-09-14T18:30:00Z",
              "api_key_id": "1",
              "api_key_label": "My Application",
              "api_key_last_update_datetime": "2023-09-15T18:30:00Z",
              "api_key_private_key_preview": "abc1234***",
              "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
              "api_key_scope": { "operation_type": "all", "operations": "all" },
              "api_key_status": "active"
            }
          ],
          "message": "ApiKey search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of ApiKey items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of ApiKey items matching the search criteria.",
            "items": {
              "properties": {
                "api_key_creation_datetime": {
                  "example": "2023-09-14T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "api_key_id": { "example": 1, "type": "integer" },
                "api_key_label": {
                  "example": "My Application",
                  "type": "string"
                },
                "api_key_last_update_datetime": {
                  "example": "2023-09-15T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "api_key_private_key_preview": {
                  "example": "abc1234***",
                  "type": "string"
                },
                "api_key_public_key": {
                  "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
                  "type": "string"
                },
                "api_key_scope": { "example": "", "type": "string" },
                "api_key_status": {
                  "enum": ["active", "deleted"],
                  "example": "active",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiRequestSuccessfulRetrieveResponse": {
        "description": "Successful API Request Retrieve",
        "example": {
          "data": {
            "api_request_client_ip_address": "122.33.24.33",
            "api_request_client_user_agent": "Chrome/2023.5.8",
            "api_request_creation_datetime": "2023-11-21 13:55:05.549007",
            "api_request_duration": 251.49846076965332,
            "api_request_id": "450337744011109b4275783f1b01e4fe",
            "api_request_method": "GET",
            "api_request_path": "/1.0/private/user/api_request/search",
            "api_request_status_code": 404
          },
          "message": "API Request retrieve successful."
        },
        "properties": {
          "data": {
            "description": "Data containing API request details",
            "properties": {
              "api_request_client_ip_address": {
                "example": "122.33.24.33",
                "type": "string"
              },
              "api_request_client_user_agent": {
                "example": "Chrome/2023.5.8",
                "type": "string"
              },
              "api_request_creation_datetime": {
                "example": "2023-11-21 13:55:05.549007",
                "type": "string"
              },
              "api_request_duration": {
                "example": 251.49846076965332,
                "type": "number"
              },
              "api_request_id": {
                "example": "450337744011109b4275783f1b01e4fe",
                "type": "string"
              },
              "api_request_method": { "example": "GET", "type": "string" },
              "api_request_path": {
                "example": "/1.0/private/user/api_request/search",
                "type": "string"
              },
              "api_request_status_code": { "example": 200, "type": "integer" }
            },
            "type": "object"
          },
          "message": {
            "description": "Description of the response message",
            "example": "API Request retrieve successful.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiRequestSuccessfulSearchResponse": {
        "description": "Successful API Request Search",
        "example": {
          "count": 2,
          "data": [
            {
              "api_request_client_ip_address": "122.33.24.33",
              "api_request_client_user_agent": "Chrome/2023.5.8",
              "api_request_creation_datetime": "2023-11-21 13:03:03.489068",
              "api_request_duration": 511.2912654876709,
              "api_request_id": "f80a7ddca2129da755204beb4b8d2d91",
              "api_request_method": "GET",
              "api_request_path": "/1.0/private/user/api_request/search",
              "api_request_status_code": 200
            },
            {
              "api_request_client_ip_address": "122.33.24.33",
              "api_request_client_user_agent": "Chrome/2023.5.8",
              "api_request_creation_datetime": "2023-11-21 13:03:51.635727",
              "api_request_duration": 364.6986484527588,
              "api_request_id": "76950bf1aa4f1962ec758e905546d673",
              "api_request_method": "GET",
              "api_request_path": "/1.0/private/user/api_request/search",
              "api_request_status_code": 200
            }
          ],
          "message": "API Request search successful."
        },
        "properties": {
          "count": {
            "description": "Count of API requests returned",
            "example": 2,
            "type": "integer"
          },
          "data": {
            "description": "Array of API request data objects",
            "items": {
              "properties": {
                "api_request_client_ip_address": {
                  "example": "122.33.24.33",
                  "type": "string"
                },
                "api_request_client_user_agent": {
                  "example": "Chrome/2023.5.8",
                  "type": "string"
                },
                "api_request_creation_datetime": {
                  "example": "2023-11-21 13:03:03.489068",
                  "type": "string"
                },
                "api_request_duration": {
                  "example": 511.2912654876709,
                  "type": "number"
                },
                "api_request_id": {
                  "example": "f80a7ddca2129da755204beb4b8d2d91",
                  "type": "string"
                },
                "api_request_method": { "example": "GET", "type": "string" },
                "api_request_path": {
                  "example": "/1.0/private/user/api_request/search",
                  "type": "string"
                },
                "api_request_status_code": { "example": 200, "type": "integer" }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Description of the response message",
            "example": "API Request search successful.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BadRequestResponse": {
        "description": "Bad Request",
        "example": {
          "error": "Bad Request",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The data provided does not match the expected format."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Bad Request",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "The data provided does not match the expected format.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BalanceTransaction": {
        "properties": {
          "balance_transaction_amount": { "example": -100, "type": "integer" },
          "balance_transaction_creation_datetime": {
            "example": "2023-09-14T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "balance_transaction_id": {
            "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
            "type": "string"
          },
          "balance_transaction_is_administrator": {
            "example": false,
            "type": "boolean"
          },
          "balance_transaction_is_out_of_band": {
            "example": false,
            "type": "boolean"
          },
          "balance_transaction_last_update_datetime": {
            "example": "2023-09-15T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "balance_transaction_reason": {
            "enum": [
              "top_up",
              "adjustment",
              "applied_to_invoice",
              "credit_note",
              "invoice_too_small",
              "invoice_too_large",
              "unapplied_from_invoice",
              "unspent_receiver_credit"
            ],
            "example": "top_up",
            "type": "string"
          },
          "invoice_id": {
            "example": "in_1NpRIvB2BUlqim5lN4v3URka",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BalanceTransactionSuccessfulRetrieveResponse": {
        "description": "BalanceTransaction retrieve was successful.",
        "example": {
          "data": {
            "balance_transaction_amount": -100,
            "balance_transaction_creation_datetime": "2023-09-14T18:30:00Z",
            "balance_transaction_id": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
            "balance_transaction_is_administrator": false,
            "balance_transaction_is_out_of_band": false,
            "balance_transaction_last_update_datetime": "2023-09-15T18:30:00Z",
            "balance_transaction_reason": "top_up",
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka"
          },
          "message": "BalanceTransaction successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved BalanceTransaction item details.",
            "properties": {
              "balance_transaction_amount": {
                "example": -100,
                "type": "integer"
              },
              "balance_transaction_creation_datetime": {
                "example": "2023-09-14T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "balance_transaction_id": {
                "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
                "type": "string"
              },
              "balance_transaction_is_administrator": {
                "example": false,
                "type": "boolean"
              },
              "balance_transaction_is_out_of_band": {
                "example": false,
                "type": "boolean"
              },
              "balance_transaction_last_update_datetime": {
                "example": "2023-09-15T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "balance_transaction_reason": {
                "enum": [
                  "top_up",
                  "adjustment",
                  "applied_to_invoice",
                  "credit_note",
                  "invoice_too_small",
                  "invoice_too_large",
                  "unapplied_from_invoice",
                  "unspent_receiver_credit"
                ],
                "example": "top_up",
                "type": "string"
              },
              "invoice_id": {
                "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BalanceTransactionSuccessfulSearchResponse": {
        "description": "BalanceTransaction search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "balance_transaction_amount": -100,
              "balance_transaction_creation_datetime": "2023-09-14T18:30:00Z",
              "balance_transaction_id": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
              "balance_transaction_is_administrator": false,
              "balance_transaction_is_out_of_band": false,
              "balance_transaction_last_update_datetime": "2023-09-15T18:30:00Z",
              "balance_transaction_reason": "top_up",
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka"
            }
          ],
          "message": "BalanceTransaction search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of BalanceTransaction items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of BalanceTransaction items matching the search criteria.",
            "items": {
              "properties": {
                "balance_transaction_amount": {
                  "example": -100,
                  "type": "integer"
                },
                "balance_transaction_creation_datetime": {
                  "example": "2023-09-14T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "balance_transaction_id": {
                  "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
                  "type": "string"
                },
                "balance_transaction_is_administrator": {
                  "example": false,
                  "type": "boolean"
                },
                "balance_transaction_is_out_of_band": {
                  "example": false,
                  "type": "boolean"
                },
                "balance_transaction_last_update_datetime": {
                  "example": "2023-09-15T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "balance_transaction_reason": {
                  "enum": [
                    "top_up",
                    "adjustment",
                    "applied_to_invoice",
                    "credit_note",
                    "invoice_too_small",
                    "invoice_too_large",
                    "unapplied_from_invoice",
                    "unspent_receiver_credit"
                  ],
                  "example": "top_up",
                  "type": "string"
                },
                "invoice_id": {
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BrowserConfig": {
        "properties": {
          "maxVersion": { "title": "Maxversion", "type": "integer" },
          "minVersion": { "title": "Minversion", "type": "integer" },
          "name": { "title": "Name", "type": "string" }
        },
        "title": "BrowserConfig",
        "type": "object"
      },
      "City": {
        "properties": {
          "city_alias": { "example": "City of Lights", "type": "string" },
          "city_creation_datetime": { "format": "date-time", "type": "string" },
          "city_example_postcode": { "example": "330122", "type": "string" },
          "city_id": { "example": 123, "type": "integer" },
          "city_is_popular": { "example": true, "type": "boolean" },
          "city_last_update_datetime": {
            "format": "date-time",
            "type": "string"
          },
          "city_latitude": { "example": 4.1221, "type": "number" },
          "city_longitude": { "example": -1.333, "type": "number" },
          "city_name": { "example": "Paris", "type": "string" },
          "city_population": { "example": 122201, "type": "integer" },
          "city_timezone": { "example": "Europe/Paris", "type": "string" },
          "subdivision_id": { "example": "Ile-de-France", "type": "string" }
        },
        "type": "object"
      },
      "CitySuccessfulRetrieveResponse": {
        "description": "City retrieve was successful.",
        "example": {
          "data": {
            "city_alias": "City of Lights",
            "city_example_postcode": "330122",
            "city_id": 123,
            "city_is_popular": true,
            "city_latitude": 4.1221,
            "city_longitude": -1.333,
            "city_name": "Paris",
            "city_population": 122201,
            "city_timezone": "Europe/Paris",
            "subdivision_id": "Ile-de-France"
          },
          "message": "City successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved City item details.",
            "properties": {
              "city_alias": { "example": "City of Lights", "type": "string" },
              "city_creation_datetime": {
                "format": "date-time",
                "type": "string"
              },
              "city_example_postcode": {
                "example": "330122",
                "type": "string"
              },
              "city_id": { "example": 123, "type": "integer" },
              "city_is_popular": { "example": true, "type": "boolean" },
              "city_last_update_datetime": {
                "format": "date-time",
                "type": "string"
              },
              "city_latitude": { "example": 4.1221, "type": "number" },
              "city_longitude": { "example": -1.333, "type": "number" },
              "city_name": { "example": "Paris", "type": "string" },
              "city_population": { "example": 122201, "type": "integer" },
              "city_timezone": { "example": "Europe/Paris", "type": "string" },
              "subdivision_id": { "example": "Ile-de-France", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CitySuccessfulSearchResponse": {
        "description": "City search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "city_alias": "City of Lights",
              "city_example_postcode": "330122",
              "city_id": 123,
              "city_is_popular": true,
              "city_latitude": 4.1221,
              "city_longitude": -1.333,
              "city_name": "Paris",
              "city_population": 122201,
              "city_timezone": "Europe/Paris",
              "subdivision_id": "Ile-de-France"
            }
          ],
          "message": "City search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of City items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of City items matching the search criteria.",
            "items": {
              "properties": {
                "city_alias": { "example": "City of Lights", "type": "string" },
                "city_creation_datetime": {
                  "format": "date-time",
                  "type": "string"
                },
                "city_example_postcode": {
                  "example": "330122",
                  "type": "string"
                },
                "city_id": { "example": 123, "type": "integer" },
                "city_is_popular": { "example": true, "type": "boolean" },
                "city_last_update_datetime": {
                  "format": "date-time",
                  "type": "string"
                },
                "city_latitude": { "example": 4.1221, "type": "number" },
                "city_longitude": { "example": -1.333, "type": "number" },
                "city_name": { "example": "Paris", "type": "string" },
                "city_population": { "example": 122201, "type": "integer" },
                "city_timezone": {
                  "example": "Europe/Paris",
                  "type": "string"
                },
                "subdivision_id": {
                  "example": "Ile-de-France",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConflictResponse": {
        "description": "Conflict",
        "example": {
          "error": "Conflict",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "There is a conflict with another resource."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Conflict",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "There is a conflict with another resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Continent": {
        "properties": {
          "continent_alias": { "example": "eu", "type": "string" },
          "continent_id": { "example": "eu", "type": "string" },
          "continent_name": { "example": "Europe", "type": "string" }
        },
        "type": "object"
      },
      "ContinentSuccessfulRetrieveResponse": {
        "description": "Continent retrieve was successful.",
        "example": {
          "data": {
            "continent_alias": "eu",
            "continent_id": "eu",
            "continent_name": "Europe"
          },
          "message": "Continent successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Continent item details.",
            "properties": {
              "continent_alias": { "example": "eu", "type": "string" },
              "continent_id": { "example": "eu", "type": "string" },
              "continent_name": { "example": "Europe", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContinentSuccessfulSearchResponse": {
        "description": "Continent search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "continent_alias": "eu",
              "continent_id": "eu",
              "continent_name": "Europe"
            }
          ],
          "message": "Continent search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Continent items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Continent items matching the search criteria.",
            "items": {
              "properties": {
                "continent_alias": { "example": "eu", "type": "string" },
                "continent_id": { "example": "eu", "type": "string" },
                "continent_name": { "example": "Europe", "type": "string" }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Country": {
        "properties": {
          "continent_id": { "example": "eu", "type": "string" },
          "country_alias": { "example": "fr", "type": "string" },
          "country_id": { "example": "fr", "type": "string" },
          "country_is_european_union": { "example": true, "type": "boolean" },
          "country_name": { "example": "France", "type": "string" }
        },
        "type": "object"
      },
      "CountrySuccessfulRetrieveResponse": {
        "description": "Country retrieve was successful.",
        "example": {
          "data": {
            "continent_id": "eu",
            "country_alias": "fr",
            "country_id": "fr",
            "country_is_european_union": true,
            "country_name": "France"
          },
          "message": "Country successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Country item details.",
            "properties": {
              "continent_id": { "example": "eu", "type": "string" },
              "country_alias": { "example": "fr", "type": "string" },
              "country_id": { "example": "fr", "type": "string" },
              "country_is_european_union": {
                "example": true,
                "type": "boolean"
              },
              "country_name": { "example": "France", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CountrySuccessfulSearchResponse": {
        "description": "Country search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "continent_id": "eu",
              "country_alias": "fr",
              "country_id": "fr",
              "country_is_european_union": true,
              "country_name": "France"
            }
          ],
          "message": "Country search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Country items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Country items matching the search criteria.",
            "items": {
              "properties": {
                "continent_id": { "example": "eu", "type": "string" },
                "country_alias": { "example": "fr", "type": "string" },
                "country_id": { "example": "fr", "type": "string" },
                "country_is_european_union": {
                  "example": true,
                  "type": "boolean"
                },
                "country_name": { "example": "France", "type": "string" }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceFingerprint": {
        "properties": {
          "device_fingerprint_browser": {
            "example": "chrome",
            "type": "string"
          },
          "device_fingerprint_creation_datetime": {
            "format": "date-time",
            "type": "string"
          },
          "device_fingerprint_description": {
            "example": "This is a device description.",
            "type": "string"
          },
          "device_fingerprint_device": {
            "example": "desktop",
            "type": "string"
          },
          "device_fingerprint_id": {
            "example": "8f8f385a-59a2-4c4c-93ec",
            "type": "string"
          },
          "device_fingerprint_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "device_fingerprint_locale": { "example": "en-US", "type": "string" },
          "device_fingerprint_name": {
            "example": "My Device",
            "type": "string"
          },
          "device_fingerprint_operating_system": {
            "example": "windows",
            "type": "string"
          },
          "device_fingerprint_user_agent": {
            "example": "Mozilla/5.0",
            "type": "string"
          },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceFingerprintSuccessfulDeleteResponse": {
        "description": "DeviceFingerprint deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "DeviceFingerprint deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted DeviceFingerprint IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceFingerprintSuccessfulRetrieveResponse": {
        "description": "DeviceFingerprint retrieve was successful.",
        "example": {
          "data": {
            "device_fingerprint_browser": "chrome",
            "device_fingerprint_creation_datetime": "2023-09-12T10:00:00",
            "device_fingerprint_description": "This is a device description.",
            "device_fingerprint_device": "desktop",
            "device_fingerprint_id": "8f8f385a-59a2-4c4c-93ec",
            "device_fingerprint_last_update_datetime": "2023-09-12T10:00:00Z",
            "device_fingerprint_locale": "en-US",
            "device_fingerprint_name": "My Device",
            "device_fingerprint_operating_system": "windows",
            "device_fingerprint_user_agent": "Mozilla/5.0",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "DeviceFingerprint successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved DeviceFingerprint item details.",
            "properties": {
              "device_fingerprint_browser": {
                "example": "chrome",
                "type": "string"
              },
              "device_fingerprint_creation_datetime": {
                "format": "date-time",
                "type": "string"
              },
              "device_fingerprint_description": {
                "example": "This is a device description.",
                "type": "string"
              },
              "device_fingerprint_device": {
                "example": "desktop",
                "type": "string"
              },
              "device_fingerprint_id": {
                "example": "8f8f385a-59a2-4c4c-93ec",
                "type": "string"
              },
              "device_fingerprint_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "device_fingerprint_locale": {
                "example": "en-US",
                "type": "string"
              },
              "device_fingerprint_name": {
                "example": "My Device",
                "type": "string"
              },
              "device_fingerprint_operating_system": {
                "example": "windows",
                "type": "string"
              },
              "device_fingerprint_user_agent": {
                "example": "Mozilla/5.0",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceFingerprintSuccessfulSearchResponse": {
        "description": "DeviceFingerprint search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "device_fingerprint_browser": "chrome",
              "device_fingerprint_creation_datetime": "2023-09-12T10:00:00",
              "device_fingerprint_description": "This is a device description.",
              "device_fingerprint_device": "desktop",
              "device_fingerprint_id": "8f8f385a-59a2-4c4c-93ec",
              "device_fingerprint_last_update_datetime": "2023-09-12T10:00:00Z",
              "device_fingerprint_locale": "en-US",
              "device_fingerprint_name": "My Device",
              "device_fingerprint_operating_system": "windows",
              "device_fingerprint_user_agent": "Mozilla/5.0",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "DeviceFingerprint search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of DeviceFingerprint items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of DeviceFingerprint items matching the search criteria.",
            "items": {
              "properties": {
                "device_fingerprint_browser": {
                  "example": "chrome",
                  "type": "string"
                },
                "device_fingerprint_creation_datetime": {
                  "format": "date-time",
                  "type": "string"
                },
                "device_fingerprint_description": {
                  "example": "This is a device description.",
                  "type": "string"
                },
                "device_fingerprint_device": {
                  "example": "desktop",
                  "type": "string"
                },
                "device_fingerprint_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec",
                  "type": "string"
                },
                "device_fingerprint_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "device_fingerprint_locale": {
                  "example": "en-US",
                  "type": "string"
                },
                "device_fingerprint_name": {
                  "example": "My Device",
                  "type": "string"
                },
                "device_fingerprint_operating_system": {
                  "example": "windows",
                  "type": "string"
                },
                "device_fingerprint_user_agent": {
                  "example": "Mozilla/5.0",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Egress": {
        "properties": {
          "headers": {
            "example": { "X-Replica-Selector": "product-api-0" },
            "properties": {},
            "title": "Headers",
            "type": "object"
          },
          "module": {
            "example": "webhook",
            "title": "Module",
            "type": "string"
          },
          "url": {
            "example": "https://www.example.com",
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["module"],
        "title": "Egress",
        "type": "object"
      },
      "EgressConfiguration": {
        "properties": {
          "egress_configuration_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "egress_configuration_description": {
            "example": "This is a configuration description.",
            "type": "string"
          },
          "egress_configuration_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "egress_configuration_json": { "example": "", "type": "string" },
          "egress_configuration_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "egress_configuration_name": {
            "example": "My Configuration",
            "type": "string"
          },
          "egress_module_id": { "type": "string" },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressConfigurationSuccessfulDeleteResponse": {
        "description": "EgressConfiguration deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "EgressConfiguration deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted EgressConfiguration IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressConfigurationSuccessfulRetrieveResponse": {
        "description": "EgressConfiguration retrieve was successful.",
        "example": {
          "data": {
            "egress_configuration_creation_datetime": "2023-09-12T10:00:00Z",
            "egress_configuration_description": "This is a configuration description.",
            "egress_configuration_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "egress_configuration_json": { "key": "value" },
            "egress_configuration_last_update_datetime": "2023-09-12T10:00:00Z",
            "egress_configuration_name": "My Configuration",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "EgressConfiguration successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved EgressConfiguration item details.",
            "properties": {
              "egress_configuration_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "egress_configuration_description": {
                "example": "This is a configuration description.",
                "type": "string"
              },
              "egress_configuration_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "egress_configuration_json": { "example": "", "type": "string" },
              "egress_configuration_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "egress_configuration_name": {
                "example": "My Configuration",
                "type": "string"
              },
              "egress_module_id": { "type": "string" },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressConfigurationSuccessfulSearchResponse": {
        "description": "EgressConfiguration search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "egress_configuration_creation_datetime": "2023-09-12T10:00:00Z",
              "egress_configuration_description": "This is a configuration description.",
              "egress_configuration_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "egress_configuration_json": { "key": "value" },
              "egress_configuration_last_update_datetime": "2023-09-12T10:00:00Z",
              "egress_configuration_name": "My Configuration",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "EgressConfiguration search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of EgressConfiguration items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of EgressConfiguration items matching the search criteria.",
            "items": {
              "properties": {
                "egress_configuration_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "egress_configuration_description": {
                  "example": "This is a configuration description.",
                  "type": "string"
                },
                "egress_configuration_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "egress_configuration_json": {
                  "example": "",
                  "type": "string"
                },
                "egress_configuration_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "egress_configuration_name": {
                  "example": "My Configuration",
                  "type": "string"
                },
                "egress_module_id": { "type": "string" },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressModule": {
        "properties": {
          "egress_module_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "egress_module_description": {
            "example": "This is a module description.",
            "type": "string"
          },
          "egress_module_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "egress_module_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "egress_module_name": { "example": "My Module", "type": "string" },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressModuleSuccessfulDeleteResponse": {
        "description": "EgressModule deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "EgressModule deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted EgressModule IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressModuleSuccessfulRetrieveResponse": {
        "description": "EgressModule retrieve was successful.",
        "example": {
          "data": {
            "egress_module_creation_datetime": "2023-09-12T10:00:00Z",
            "egress_module_description": "This is a module description.",
            "egress_module_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "egress_module_last_update_datetime": "2023-09-12T10:00:00Z",
            "egress_module_name": "My Module",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "EgressModule successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved EgressModule item details.",
            "properties": {
              "egress_module_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "egress_module_description": {
                "example": "This is a module description.",
                "type": "string"
              },
              "egress_module_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "egress_module_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "egress_module_name": {
                "example": "My Module",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EgressModuleSuccessfulSearchResponse": {
        "description": "EgressModule search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "egress_module_creation_datetime": "2023-09-12T10:00:00Z",
              "egress_module_description": "This is a module description.",
              "egress_module_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "egress_module_last_update_datetime": "2023-09-12T10:00:00Z",
              "egress_module_name": "My Module",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "EgressModule search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of EgressModule items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of EgressModule items matching the search criteria.",
            "items": {
              "properties": {
                "egress_module_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "egress_module_description": {
                  "example": "This is a module description.",
                  "type": "string"
                },
                "egress_module_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "egress_module_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "egress_module_name": {
                  "example": "My Module",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fingerprint": {
        "properties": {
          "browser": {
            "allOf": [{ "$ref": "#/components/schemas/BrowserConfig" }],
            "example": {
              "maxVersion": "90",
              "minVersion": "80",
              "name": "chrome"
            },
            "title": "Browser",
            "type": "object"
          },
          "country_id": {
            "example": "gb",
            "title": "Country Id",
            "type": "string"
          },
          "css": {
            "default": true,
            "example": true,
            "title": "Css",
            "type": "boolean"
          },
          "device": {
            "default": "desktop",
            "example": "desktop",
            "title": "Device",
            "type": "string"
          },
          "images": {
            "default": true,
            "example": true,
            "title": "Images",
            "type": "boolean"
          },
          "js_rendering": {
            "default": true,
            "example": true,
            "title": "Js Rendering",
            "type": "boolean"
          },
          "language": {
            "default": "en",
            "example": "en",
            "title": "Language",
            "type": "string"
          },
          "mock_web_rtc": {
            "default": false,
            "example": false,
            "title": "mock_web_rtc",
            "type": "boolean"
          },
          "operating_system": {
            "default": "linux",
            "example": "windows",
            "title": "Operating System",
            "type": "string"
          },
          "proxy": {
            "example": "http://user:password@192.168.1.1:8000",
            "title": "Proxy",
            "type": "string"
          },
          "proxy_type": {
            "example": "residential",
            "title": "Proxy Type",
            "type": "string"
          },
          "strict": {
            "default": false,
            "example": false,
            "title": "Strict",
            "type": "boolean"
          },
          "user_agent": {
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
            "title": "User Agent",
            "type": "string"
          }
        },
        "title": "Fingerprint",
        "type": "object"
      },
      "ForbiddenResponse": {
        "description": "Forbidden",
        "example": {
          "error": "Forbidden",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "You don't have the necessary permissions to access this resource."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Forbidden",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "You don't have the necessary permissions to access this resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoFingerprint": {
        "properties": {
          "city_alias": { "example": "man", "type": "string" },
          "country_id": { "example": "gb", "type": "string" },
          "geo_fingerprint_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "geo_fingerprint_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "geo_fingerprint_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "geo_fingerprint_proxy_type": {
            "enum": ["datacenter", "residential", "isp"],
            "example": "https",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoFingerprintSuccessfulDeleteResponse": {
        "description": "GeoFingerprint deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "GeoFingerprint deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted GeoFingerprint IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoFingerprintSuccessfulRetrieveResponse": {
        "description": "GeoFingerprint retrieve was successful.",
        "example": {
          "data": {
            "city_alias": "man",
            "country_id": "gb",
            "geo_fingerprint_creation_datetime": "2023-09-12T10:00:00Z",
            "geo_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "geo_fingerprint_last_update_datetime": "2023-09-12T10:00:00Z",
            "geo_fingerprint_proxy_type": "https"
          },
          "message": "GeoFingerprint successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved GeoFingerprint item details.",
            "properties": {
              "city_alias": { "example": "man", "type": "string" },
              "country_id": { "example": "gb", "type": "string" },
              "geo_fingerprint_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "geo_fingerprint_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "geo_fingerprint_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "geo_fingerprint_proxy_type": {
                "enum": ["datacenter", "residential", "isp"],
                "example": "https",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GeoFingerprintSuccessfulSearchResponse": {
        "description": "GeoFingerprint search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "city_alias": "man",
              "country_id": "gb",
              "geo_fingerprint_creation_datetime": "2023-09-12T10:00:00Z",
              "geo_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "geo_fingerprint_last_update_datetime": "2023-09-12T10:00:00Z",
              "geo_fingerprint_proxy_type": "https"
            }
          ],
          "message": "GeoFingerprint search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of GeoFingerprint items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of GeoFingerprint items matching the search criteria.",
            "items": {
              "properties": {
                "city_alias": { "example": "man", "type": "string" },
                "country_id": { "example": "gb", "type": "string" },
                "geo_fingerprint_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "geo_fingerprint_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "geo_fingerprint_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "geo_fingerprint_proxy_type": {
                  "enum": ["datacenter", "residential", "isp"],
                  "example": "https",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "Instruction": {
        "properties": {
          "action": {
            "enum": [
              "click",
              "wait",
              "screenshot",
              "scroll",
              "type",
              "extraction",
              "iterate"
            ],
            "title": "Action",
            "type": "string"
          },
          "delta_x": { "title": "Delta X", "type": "integer" },
          "delta_y": { "title": "Delta Y", "type": "integer" },
          "duration": { "title": "Duration", "type": "integer" },
          "group_output": { "title": "Group Output", "type": "string" },
          "instructions": {
            "items": { "$ref": "#/components/schemas/Instruction" },
            "title": "Instructions",
            "type": "array"
          },
          "output": { "title": "Output", "type": "string" },
          "parent_selector": { "title": "Parent Selector", "type": "string" },
          "range": { "title": "Range", "type": "object" },
          "selector": { "title": "Selector", "type": "object" },
          "value": { "title": "Value", "type": "string" },
          "variant": { "title": "Variant", "type": "string" }
        },
        "required": ["action"],
        "title": "Instruction",
        "type": "object"
      },
      "InternalServer": {
        "description": "Internal Server Error",
        "example": {
          "error": "Internal Server Error",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Internal Server Error",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Invoice": {
        "properties": {
          "invoice_amount_paid": { "example": 3, "type": "integer" },
          "invoice_creation_datetime": {
            "example": "2023-09-14T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "invoice_discounts": {
            "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
            "properties": {},
            "type": "object"
          },
          "invoice_due_datetime": {
            "example": "2023-09-15T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "invoice_id": {
            "example": "in_1NpRIvB2BUlqim5lN4v3URka",
            "type": "string"
          },
          "invoice_is_automatic_collection": {
            "example": true,
            "type": "boolean"
          },
          "invoice_is_cart": { "example": true, "type": "boolean" },
          "invoice_last_update_datetime": {
            "example": "2023-09-15T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "invoice_line_items": {
            "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
            "properties": {},
            "type": "object"
          },
          "invoice_pdf": {
            "example": "https://invoice.stripe.com/inv123456.pdf",
            "type": "string"
          },
          "invoice_status": {
            "enum": ["open", "paid", "void", "draft"],
            "example": "paid",
            "type": "string"
          },
          "invoice_total": { "example": 3, "type": "integer" },
          "invoice_type": {
            "enum": ["stripe", "bitpay", "coinpayments", "internal", "draft"],
            "example": "stripe",
            "type": "string"
          },
          "invoice_url": {
            "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
            "type": "string"
          },
          "service_id": { "example": "169-1489-4251", "type": "string" }
        },
        "type": "object"
      },
      "InvoiceSuccessfulRetrieveResponse": {
        "description": "Invoice retrieve was successful.",
        "example": {
          "data": {
            "invoice_amount_paid": 3,
            "invoice_creation_datetime": "2023-09-14T18:30:00Z",
            "invoice_discounts": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
            "invoice_due_datetime": "2023-09-15T18:30:00Z",
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
            "invoice_is_automatic_collection": true,
            "invoice_is_cart": true,
            "invoice_last_update_datetime": "2023-09-15T18:30:00Z",
            "invoice_line_items": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
            "invoice_pdf": "https://invoice.stripe.com/inv123456.pdf",
            "invoice_status": "paid",
            "invoice_total": 3,
            "invoice_type": "stripe",
            "invoice_url": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
            "service_id": "169-1489-4251"
          },
          "message": "Invoice successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Invoice item details.",
            "properties": {
              "invoice_amount_paid": { "example": 3, "type": "integer" },
              "invoice_creation_datetime": {
                "example": "2023-09-14T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "invoice_discounts": {
                "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
                "properties": {},
                "type": "object"
              },
              "invoice_due_datetime": {
                "example": "2023-09-15T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "invoice_id": {
                "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                "type": "string"
              },
              "invoice_is_automatic_collection": {
                "example": true,
                "type": "boolean"
              },
              "invoice_is_cart": { "example": true, "type": "boolean" },
              "invoice_last_update_datetime": {
                "example": "2023-09-15T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "invoice_line_items": {
                "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
                "properties": {},
                "type": "object"
              },
              "invoice_pdf": {
                "example": "https://invoice.stripe.com/inv123456.pdf",
                "type": "string"
              },
              "invoice_status": {
                "enum": ["open", "paid", "void", "draft"],
                "example": "paid",
                "type": "string"
              },
              "invoice_total": { "example": 3, "type": "integer" },
              "invoice_type": {
                "enum": [
                  "stripe",
                  "bitpay",
                  "coinpayments",
                  "internal",
                  "draft"
                ],
                "example": "stripe",
                "type": "string"
              },
              "invoice_url": {
                "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
                "type": "string"
              },
              "service_id": { "example": "169-1489-4251", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvoiceSuccessfulSearchResponse": {
        "description": "Invoice search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "invoice_amount_paid": 3,
              "invoice_creation_datetime": "2023-09-14T18:30:00Z",
              "invoice_discounts": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
              "invoice_due_datetime": "2023-09-15T18:30:00Z",
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
              "invoice_is_automatic_collection": true,
              "invoice_is_cart": true,
              "invoice_last_update_datetime": "2023-09-15T18:30:00Z",
              "invoice_line_items": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
              "invoice_pdf": "https://invoice.stripe.com/inv123456.pdf",
              "invoice_status": "paid",
              "invoice_total": 3,
              "invoice_type": "stripe",
              "invoice_url": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
              "service_id": "169-1489-4251"
            }
          ],
          "message": "Invoice search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Invoice items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Invoice items matching the search criteria.",
            "items": {
              "properties": {
                "invoice_amount_paid": { "example": 3, "type": "integer" },
                "invoice_creation_datetime": {
                  "example": "2023-09-14T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "invoice_discounts": {
                  "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
                  "properties": {},
                  "type": "object"
                },
                "invoice_due_datetime": {
                  "example": "2023-09-15T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "invoice_id": {
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                  "type": "string"
                },
                "invoice_is_automatic_collection": {
                  "example": true,
                  "type": "boolean"
                },
                "invoice_is_cart": { "example": true, "type": "boolean" },
                "invoice_last_update_datetime": {
                  "example": "2023-09-15T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "invoice_line_items": {
                  "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
                  "properties": {},
                  "type": "object"
                },
                "invoice_pdf": {
                  "example": "https://invoice.stripe.com/inv123456.pdf",
                  "type": "string"
                },
                "invoice_status": {
                  "enum": ["open", "paid", "void", "draft"],
                  "example": "paid",
                  "type": "string"
                },
                "invoice_total": { "example": 3, "type": "integer" },
                "invoice_type": {
                  "enum": [
                    "stripe",
                    "bitpay",
                    "coinpayments",
                    "internal",
                    "draft"
                  ],
                  "example": "stripe",
                  "type": "string"
                },
                "invoice_url": {
                  "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
                  "type": "string"
                },
                "service_id": { "example": "169-1489-4251", "type": "string" }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Job": {
        "properties": {
          "device_fingerprint_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "egress_configuration_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "geo_fingerprint_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_budget": { "example": 100, "type": "integer" },
          "job_cost": { "example": 100, "type": "integer" },
          "job_creation_datetime": { "format": "date-time", "type": "string" },
          "job_end_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "job_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_interval": { "example": 100, "type": "integer" },
          "job_js_rendering": { "example": true, "type": "boolean" },
          "job_last_update_datetime": {
            "format": "date-time",
            "type": "string"
          },
          "job_max_run_count": { "example": 100, "type": "integer" },
          "job_run_count": { "example": 10, "type": "integer" },
          "job_run_stop_reason": {
            "enum": [
              "user",
              "system",
              "error",
              "timeout",
              "unkown",
              "out_of_tokens",
              "over_budget",
              "template_not_found",
              "device_fingerprint_not_found",
              "geo_fingerprint_not_found",
              "egress_configuration_not_found"
            ],
            "example": "budget_exceeded",
            "type": "string"
          },
          "job_scheduled_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "job_status": {
            "enum": [
              "pending",
              "running",
              "complete",
              "paused",
              "stopped",
              "scheduled"
            ],
            "example": "running",
            "type": "string"
          },
          "job_type": {
            "enum": ["crawler", "batch"],
            "example": "crawl",
            "type": "string"
          },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "project_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "template_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobInput": {
        "properties": {
          "device_fingerprint_id": {
            "title": "Device Fingerprint Id",
            "type": "string"
          },
          "egress_configuration_id": {
            "title": "Egress Configuration Id",
            "type": "string"
          },
          "entrypoints": {
            "items": { "type": "string" },
            "title": "Entrypoints",
            "type": "array"
          },
          "geo_fingerprint_id": {
            "title": "Geo Fingerprint Id",
            "type": "string"
          },
          "job_budget": {
            "minimum": 0,
            "title": "Job Budget",
            "type": "integer"
          },
          "job_interval": { "title": "Job Interval", "type": "integer" },
          "job_max_run_count": {
            "minimum": 1,
            "title": "Job Max Run Count",
            "type": "integer"
          },
          "job_scheduled_datetime": {
            "format": "date-time",
            "title": "Job Scheduled Datetime",
            "type": "string"
          },
          "job_type": {
            "default": "batch",
            "title": "Job Type",
            "type": "string"
          },
          "project_id": { "title": "Project Id", "type": "string" },
          "template_id": { "title": "Template Id", "type": "string" }
        },
        "required": [
          "egress_configuration_id",
          "entrypoints",
          "geo_fingerprint_id",
          "job_budget",
          "job_max_run_count",
          "template_id"
        ],
        "title": "JobInput",
        "type": "object"
      },
      "JobRun": {
        "properties": {
          "job_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_run_cost": { "example": 100, "type": "integer" },
          "job_run_created_task_count": { "example": 10, "type": "integer" },
          "job_run_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "job_run_failed_task_count": { "example": 2, "type": "integer" },
          "job_run_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_run_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "job_run_status": {
            "enum": [
              "pending",
              "running",
              "complete",
              "paused",
              "stopped",
              "scheduled"
            ],
            "example": "running",
            "type": "string"
          },
          "job_run_stop_reason": {
            "enum": [
              "user",
              "system",
              "error",
              "timeout",
              "unkown",
              "out_of_tokens",
              "over_budget",
              "template_not_found",
              "device_fingerprint_not_found",
              "geo_fingerprint_not_found",
              "egress_configuration_not_found"
            ],
            "example": "budget_exceeded",
            "type": "string"
          },
          "job_run_successful_task_count": { "example": 8, "type": "integer" },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobRunSuccessfulRetrieveResponse": {
        "description": "JobRun retrieve was successful.",
        "example": {
          "data": {
            "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_run_cost": 100,
            "job_run_created_task_count": 10,
            "job_run_creation_datetime": "2023-09-12T10:00:00Z",
            "job_run_failed_task_count": 2,
            "job_run_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_run_last_update_datetime": "2023-09-12T10:00:00Z",
            "job_run_status": "running",
            "job_run_stop_reason": "budget_exceeded",
            "job_run_successful_task_count": 8,
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "JobRun successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved JobRun item details.",
            "properties": {
              "job_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_run_cost": { "example": 100, "type": "integer" },
              "job_run_created_task_count": {
                "example": 10,
                "type": "integer"
              },
              "job_run_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "job_run_failed_task_count": { "example": 2, "type": "integer" },
              "job_run_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_run_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "job_run_status": {
                "enum": [
                  "pending",
                  "running",
                  "complete",
                  "paused",
                  "stopped",
                  "scheduled"
                ],
                "example": "running",
                "type": "string"
              },
              "job_run_stop_reason": {
                "enum": [
                  "user",
                  "system",
                  "error",
                  "timeout",
                  "unkown",
                  "out_of_tokens",
                  "over_budget",
                  "template_not_found",
                  "device_fingerprint_not_found",
                  "geo_fingerprint_not_found",
                  "egress_configuration_not_found"
                ],
                "example": "budget_exceeded",
                "type": "string"
              },
              "job_run_successful_task_count": {
                "example": 8,
                "type": "integer"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobRunSuccessfulSearchResponse": {
        "description": "JobRun search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_run_cost": 100,
              "job_run_created_task_count": 10,
              "job_run_creation_datetime": "2023-09-12T10:00:00Z",
              "job_run_failed_task_count": 2,
              "job_run_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_run_last_update_datetime": "2023-09-12T10:00:00Z",
              "job_run_status": "running",
              "job_run_stop_reason": "budget_exceeded",
              "job_run_successful_task_count": 8,
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "JobRun search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of JobRun items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of JobRun items matching the search criteria.",
            "items": {
              "properties": {
                "job_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_run_cost": { "example": 100, "type": "integer" },
                "job_run_created_task_count": {
                  "example": 10,
                  "type": "integer"
                },
                "job_run_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "job_run_failed_task_count": {
                  "example": 2,
                  "type": "integer"
                },
                "job_run_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_run_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "job_run_status": {
                  "enum": [
                    "pending",
                    "running",
                    "complete",
                    "paused",
                    "stopped",
                    "scheduled"
                  ],
                  "example": "running",
                  "type": "string"
                },
                "job_run_stop_reason": {
                  "enum": [
                    "user",
                    "system",
                    "error",
                    "timeout",
                    "unkown",
                    "out_of_tokens",
                    "over_budget",
                    "template_not_found",
                    "device_fingerprint_not_found",
                    "geo_fingerprint_not_found",
                    "egress_configuration_not_found"
                  ],
                  "example": "budget_exceeded",
                  "type": "string"
                },
                "job_run_successful_task_count": {
                  "example": 8,
                  "type": "integer"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobSuccessfulRetrieveResponse": {
        "description": "Job retrieve was successful.",
        "example": {
          "data": {
            "device_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "egress_configuration_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "geo_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_budget": 100,
            "job_cost": 100,
            "job_end_datetime": "2023-09-12T10:00:00Z",
            "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_interval": 100,
            "job_js_rendering": true,
            "job_max_run_count": 100,
            "job_run_count": 10,
            "job_run_stop_reason": "budget_exceeded",
            "job_scheduled_datetime": "2023-09-12T10:00:00Z",
            "job_status": "running",
            "job_type": "crawl",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "template_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "Job successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Job item details.",
            "properties": {
              "device_fingerprint_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "egress_configuration_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "geo_fingerprint_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_budget": { "example": 100, "type": "integer" },
              "job_cost": { "example": 100, "type": "integer" },
              "job_creation_datetime": {
                "format": "date-time",
                "type": "string"
              },
              "job_end_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "job_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_interval": { "example": 100, "type": "integer" },
              "job_js_rendering": { "example": true, "type": "boolean" },
              "job_last_update_datetime": {
                "format": "date-time",
                "type": "string"
              },
              "job_max_run_count": { "example": 100, "type": "integer" },
              "job_run_count": { "example": 10, "type": "integer" },
              "job_run_stop_reason": {
                "enum": [
                  "user",
                  "system",
                  "error",
                  "timeout",
                  "unkown",
                  "out_of_tokens",
                  "over_budget",
                  "template_not_found",
                  "device_fingerprint_not_found",
                  "geo_fingerprint_not_found",
                  "egress_configuration_not_found"
                ],
                "example": "budget_exceeded",
                "type": "string"
              },
              "job_scheduled_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "job_status": {
                "enum": [
                  "pending",
                  "running",
                  "complete",
                  "paused",
                  "stopped",
                  "scheduled"
                ],
                "example": "running",
                "type": "string"
              },
              "job_type": {
                "enum": ["crawler", "batch"],
                "example": "crawl",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "project_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "template_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobSuccessfulSearchResponse": {
        "description": "Job search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "device_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "egress_configuration_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "geo_fingerprint_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_budget": 100,
              "job_cost": 100,
              "job_end_datetime": "2023-09-12T10:00:00Z",
              "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_interval": 100,
              "job_js_rendering": true,
              "job_max_run_count": 100,
              "job_run_count": 10,
              "job_run_stop_reason": "budget_exceeded",
              "job_scheduled_datetime": "2023-09-12T10:00:00Z",
              "job_status": "running",
              "job_type": "crawl",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "template_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "Job search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Job items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Job items matching the search criteria.",
            "items": {
              "properties": {
                "device_fingerprint_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "egress_configuration_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "geo_fingerprint_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_budget": { "example": 100, "type": "integer" },
                "job_cost": { "example": 100, "type": "integer" },
                "job_creation_datetime": {
                  "format": "date-time",
                  "type": "string"
                },
                "job_end_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "job_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_interval": { "example": 100, "type": "integer" },
                "job_js_rendering": { "example": true, "type": "boolean" },
                "job_last_update_datetime": {
                  "format": "date-time",
                  "type": "string"
                },
                "job_max_run_count": { "example": 100, "type": "integer" },
                "job_run_count": { "example": 10, "type": "integer" },
                "job_run_stop_reason": {
                  "enum": [
                    "user",
                    "system",
                    "error",
                    "timeout",
                    "unkown",
                    "out_of_tokens",
                    "over_budget",
                    "template_not_found",
                    "device_fingerprint_not_found",
                    "geo_fingerprint_not_found",
                    "egress_configuration_not_found"
                  ],
                  "example": "budget_exceeded",
                  "type": "string"
                },
                "job_scheduled_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "job_status": {
                  "enum": [
                    "pending",
                    "running",
                    "complete",
                    "paused",
                    "stopped",
                    "scheduled"
                  ],
                  "example": "running",
                  "type": "string"
                },
                "job_type": {
                  "enum": ["crawler", "batch"],
                  "example": "crawl",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "project_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "template_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobTarget": {
        "properties": {
          "job_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_target_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "job_target_entrypoint_url": {
            "example": "https://example.com",
            "type": "string"
          },
          "job_target_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "job_target_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobTargetSuccessfulRetrieveResponse": {
        "description": "JobTarget retrieve was successful.",
        "example": {
          "data": {
            "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_target_creation_datetime": "2023-09-12T10:00:00Z",
            "job_target_entrypoint_url": "https://example.com",
            "job_target_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "job_target_last_update_datetime": "2023-09-12T10:00:00Z",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
          },
          "message": "JobTarget successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved JobTarget item details.",
            "properties": {
              "job_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_target_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "job_target_entrypoint_url": {
                "example": "https://example.com",
                "type": "string"
              },
              "job_target_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "job_target_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobTargetSuccessfulSearchResponse": {
        "description": "JobTarget search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_target_creation_datetime": "2023-09-12T10:00:00Z",
              "job_target_entrypoint_url": "https://example.com",
              "job_target_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "job_target_last_update_datetime": "2023-09-12T10:00:00Z",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83"
            }
          ],
          "message": "JobTarget search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of JobTarget items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of JobTarget items matching the search criteria.",
            "items": {
              "properties": {
                "job_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_target_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "job_target_entrypoint_url": {
                  "example": "https://example.com",
                  "type": "string"
                },
                "job_target_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "job_target_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LlmGenerateInput": {
        "properties": {
          "base_template": { "$ref": "#/components/schemas/TaskInput" },
          "prompt": { "title": "Prompt", "type": "string" },
          "url": { "title": "Url", "type": "string" }
        },
        "required": ["prompt", "url"],
        "title": "LlmGenerateInput",
        "type": "object"
      },
      "LongHandSelector": {
        "properties": {
          "selector": { "title": "Selector", "type": "string" },
          "target": { "title": "Target", "type": "string" }
        },
        "required": ["selector", "target"],
        "title": "LongHandSelector",
        "type": "object"
      },
      "Metadata": {
        "properties": {
          "device_fingerprint_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Device Fingerprint Id",
            "type": "string"
          },
          "geo_fingerprint_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Geo Fingerprint Id",
            "type": "string"
          },
          "job_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Job Id",
            "type": "string"
          },
          "job_run_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Job Run Id",
            "type": "string"
          },
          "organization_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Organization Id",
            "type": "string"
          },
          "project_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Project Id",
            "type": "string"
          },
          "task_bytes": {
            "example": 1000,
            "title": "Task Bytes",
            "type": "integer"
          },
          "task_class": {
            "example": "isp_js_enabled",
            "title": "Task Class",
            "type": "string"
          },
          "task_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Task Id",
            "type": "string"
          },
          "template_id": {
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "format": "uuid",
            "title": "Template Id",
            "type": "string"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "MethodNotAllowedResponse": {
        "description": "Method Not Allowed",
        "example": {
          "error": "Method Not Allowed",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "Method is not supported for this endpoint."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Method Not Allowed",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "Method is not supported for this endpoint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotFoundResponse": {
        "description": "Not Found",
        "example": {
          "error": "Not Found",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The requested resource or path could not be located."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Not Found",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "The requested resource or path could not be located.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Notification": {
        "properties": {
          "notification_content": {
            "example": "Your service has been successfully updated to the latest version.",
            "type": "string"
          },
          "notification_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "notification_icon": { "example": "bell", "type": "string" },
          "notification_id": { "example": 1001, "type": "integer" },
          "notification_is_email": { "example": true, "type": "boolean" },
          "notification_last_update_datetime": {
            "example": "2023-09-12T11:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "notification_link": {
            "example": "https://example.com/notification/1001",
            "type": "string"
          },
          "notification_preview": {
            "example": "Your service has been updated.",
            "type": "string"
          },
          "notification_read_datetime": {
            "example": "2023-09-12T10:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "notification_scope": {
            "enum": ["user", "global"],
            "example": "global",
            "type": "string"
          },
          "notification_title": {
            "example": "Service Update",
            "type": "string"
          },
          "notification_type": {
            "enum": ["promotion", "service", "network", "account", "other"],
            "example": "account",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationSuccessfulRetrieveResponse": {
        "description": "Notification retrieve was successful.",
        "example": {
          "data": {
            "notification_content": "Your service has been successfully updated to the latest version.",
            "notification_creation_datetime": "2023-09-12T10:00:00Z",
            "notification_icon": "bell",
            "notification_id": 1001,
            "notification_is_email": true,
            "notification_last_update_datetime": "2023-09-12T11:00:00Z",
            "notification_link": "https://example.com/notification/1001",
            "notification_preview": "Your service has been updated.",
            "notification_read_datetime": "2023-09-12T10:30:00Z",
            "notification_scope": "global",
            "notification_title": "Service Update",
            "notification_type": "account"
          },
          "message": "Notification successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Notification item details.",
            "properties": {
              "notification_content": {
                "example": "Your service has been successfully updated to the latest version.",
                "type": "string"
              },
              "notification_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "notification_icon": { "example": "bell", "type": "string" },
              "notification_id": { "example": 1001, "type": "integer" },
              "notification_is_email": { "example": true, "type": "boolean" },
              "notification_last_update_datetime": {
                "example": "2023-09-12T11:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "notification_link": {
                "example": "https://example.com/notification/1001",
                "type": "string"
              },
              "notification_preview": {
                "example": "Your service has been updated.",
                "type": "string"
              },
              "notification_read_datetime": {
                "example": "2023-09-12T10:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "notification_scope": {
                "enum": ["user", "global"],
                "example": "global",
                "type": "string"
              },
              "notification_title": {
                "example": "Service Update",
                "type": "string"
              },
              "notification_type": {
                "enum": ["promotion", "service", "network", "account", "other"],
                "example": "account",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationSuccessfulSearchResponse": {
        "description": "Notification search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "notification_content": "Your service has been successfully updated to the latest version.",
              "notification_creation_datetime": "2023-09-12T10:00:00Z",
              "notification_icon": "bell",
              "notification_id": 1001,
              "notification_is_email": true,
              "notification_last_update_datetime": "2023-09-12T11:00:00Z",
              "notification_link": "https://example.com/notification/1001",
              "notification_preview": "Your service has been updated.",
              "notification_read_datetime": "2023-09-12T10:30:00Z",
              "notification_scope": "global",
              "notification_title": "Service Update",
              "notification_type": "account"
            }
          ],
          "message": "Notification search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Notification items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Notification items matching the search criteria.",
            "items": {
              "properties": {
                "notification_content": {
                  "example": "Your service has been successfully updated to the latest version.",
                  "type": "string"
                },
                "notification_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "notification_icon": { "example": "bell", "type": "string" },
                "notification_id": { "example": 1001, "type": "integer" },
                "notification_is_email": { "example": true, "type": "boolean" },
                "notification_last_update_datetime": {
                  "example": "2023-09-12T11:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "notification_link": {
                  "example": "https://example.com/notification/1001",
                  "type": "string"
                },
                "notification_preview": {
                  "example": "Your service has been updated.",
                  "type": "string"
                },
                "notification_read_datetime": {
                  "example": "2023-09-12T10:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "notification_scope": {
                  "enum": ["user", "global"],
                  "example": "global",
                  "type": "string"
                },
                "notification_title": {
                  "example": "Service Update",
                  "type": "string"
                },
                "notification_type": {
                  "enum": [
                    "promotion",
                    "service",
                    "network",
                    "account",
                    "other"
                  ],
                  "example": "account",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "properties": {
          "country_id_billing": { "example": "us", "type": "string" },
          "organization_billing_line_one": {
            "example": "123 Main St.",
            "type": "string"
          },
          "organization_billing_line_two": {
            "example": "Apt. 1",
            "type": "string"
          },
          "organization_billing_name": {
            "example": "John Doe",
            "type": "string"
          },
          "organization_billing_subdivision_name": {
            "example": "California",
            "type": "string"
          },
          "organization_billing_zip_code": {
            "example": "90210",
            "type": "string"
          },
          "organization_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "organization_credit_balance": { "example": 100, "type": "integer" },
          "organization_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "organization_tax_id": { "example": "123456789", "type": "string" }
        },
        "type": "object"
      },
      "OrganizationSuccessfulRetrieveResponse": {
        "description": "Organization retrieve was successful.",
        "example": {
          "data": {
            "country_id_billing": "us",
            "organization_billing_line_one": "123 Main St.",
            "organization_billing_line_two": "Apt. 1",
            "organization_billing_name": "John Doe",
            "organization_billing_subdivision_name": "California",
            "organization_billing_zip_code": "90210",
            "organization_creation_datetime": "2023-09-12T10:00:00Z",
            "organization_credit_balance": 100,
            "organization_last_update_datetime": "2023-09-12T10:00:00Z",
            "organization_tax_id": "123456789"
          },
          "message": "Organization successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Organization item details.",
            "properties": {
              "country_id_billing": { "example": "us", "type": "string" },
              "organization_billing_line_one": {
                "example": "123 Main St.",
                "type": "string"
              },
              "organization_billing_line_two": {
                "example": "Apt. 1",
                "type": "string"
              },
              "organization_billing_name": {
                "example": "John Doe",
                "type": "string"
              },
              "organization_billing_subdivision_name": {
                "example": "California",
                "type": "string"
              },
              "organization_billing_zip_code": {
                "example": "90210",
                "type": "string"
              },
              "organization_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "organization_credit_balance": {
                "example": 100,
                "type": "integer"
              },
              "organization_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "organization_tax_id": {
                "example": "123456789",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationSuccessfulSearchResponse": {
        "description": "Organization search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "country_id_billing": "us",
              "organization_billing_line_one": "123 Main St.",
              "organization_billing_line_two": "Apt. 1",
              "organization_billing_name": "John Doe",
              "organization_billing_subdivision_name": "California",
              "organization_billing_zip_code": "90210",
              "organization_creation_datetime": "2023-09-12T10:00:00Z",
              "organization_credit_balance": 100,
              "organization_last_update_datetime": "2023-09-12T10:00:00Z",
              "organization_tax_id": "123456789"
            }
          ],
          "message": "Organization search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Organization items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Organization items matching the search criteria.",
            "items": {
              "properties": {
                "country_id_billing": { "example": "us", "type": "string" },
                "organization_billing_line_one": {
                  "example": "123 Main St.",
                  "type": "string"
                },
                "organization_billing_line_two": {
                  "example": "Apt. 1",
                  "type": "string"
                },
                "organization_billing_name": {
                  "example": "John Doe",
                  "type": "string"
                },
                "organization_billing_subdivision_name": {
                  "example": "California",
                  "type": "string"
                },
                "organization_billing_zip_code": {
                  "example": "90210",
                  "type": "string"
                },
                "organization_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "organization_credit_balance": {
                  "example": 100,
                  "type": "integer"
                },
                "organization_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "organization_tax_id": {
                  "example": "123456789",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethod": {
        "properties": {
          "payment_method_billing_name": {
            "example": "John Doe",
            "type": "string"
          },
          "payment_method_expiry_month": { "example": 9, "type": "integer" },
          "payment_method_expiry_year": { "example": 2025, "type": "integer" },
          "payment_method_id": {
            "example": "pm_1NSx6OB2BUlqim5luefrhr",
            "type": "string"
          },
          "payment_method_is_default": { "example": true, "type": "boolean" },
          "payment_method_last_four": { "example": "1234", "type": "string" },
          "payment_method_network": { "example": "visa", "type": "string" },
          "payment_method_platform": {
            "enum": ["stripe"],
            "example": "stripe",
            "type": "string"
          },
          "payment_method_status": {
            "enum": ["attached", "detached"],
            "example": "complete",
            "type": "string"
          },
          "payment_method_type": {
            "enum": ["card"],
            "example": "card",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodSuccessfulDeleteResponse": {
        "description": "PaymentMethod deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "PaymentMethod deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted PaymentMethod IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodSuccessfulRetrieveResponse": {
        "description": "PaymentMethod retrieve was successful.",
        "example": {
          "data": {
            "payment_method_billing_name": "John Doe",
            "payment_method_expiry_month": "09",
            "payment_method_expiry_year": "2025",
            "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
            "payment_method_is_default": true,
            "payment_method_last_four": "1234",
            "payment_method_network": "visa",
            "payment_method_platform": "stripe",
            "payment_method_status": "complete",
            "payment_method_type": "card"
          },
          "message": "PaymentMethod successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved PaymentMethod item details.",
            "properties": {
              "payment_method_billing_name": {
                "example": "John Doe",
                "type": "string"
              },
              "payment_method_expiry_month": {
                "example": 9,
                "type": "integer"
              },
              "payment_method_expiry_year": {
                "example": 2025,
                "type": "integer"
              },
              "payment_method_id": {
                "example": "pm_1NSx6OB2BUlqim5luefrhr",
                "type": "string"
              },
              "payment_method_is_default": {
                "example": true,
                "type": "boolean"
              },
              "payment_method_last_four": {
                "example": "1234",
                "type": "string"
              },
              "payment_method_network": { "example": "visa", "type": "string" },
              "payment_method_platform": {
                "enum": ["stripe"],
                "example": "stripe",
                "type": "string"
              },
              "payment_method_status": {
                "enum": ["attached", "detached"],
                "example": "complete",
                "type": "string"
              },
              "payment_method_type": {
                "enum": ["card"],
                "example": "card",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodSuccessfulSearchResponse": {
        "description": "PaymentMethod search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "payment_method_billing_name": "John Doe",
              "payment_method_expiry_month": "09",
              "payment_method_expiry_year": "2025",
              "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
              "payment_method_is_default": true,
              "payment_method_last_four": "1234",
              "payment_method_network": "visa",
              "payment_method_platform": "stripe",
              "payment_method_status": "complete",
              "payment_method_type": "card"
            }
          ],
          "message": "PaymentMethod search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of PaymentMethod items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of PaymentMethod items matching the search criteria.",
            "items": {
              "properties": {
                "payment_method_billing_name": {
                  "example": "John Doe",
                  "type": "string"
                },
                "payment_method_expiry_month": {
                  "example": 9,
                  "type": "integer"
                },
                "payment_method_expiry_year": {
                  "example": 2025,
                  "type": "integer"
                },
                "payment_method_id": {
                  "example": "pm_1NSx6OB2BUlqim5luefrhr",
                  "type": "string"
                },
                "payment_method_is_default": {
                  "example": true,
                  "type": "boolean"
                },
                "payment_method_last_four": {
                  "example": "1234",
                  "type": "string"
                },
                "payment_method_network": {
                  "example": "visa",
                  "type": "string"
                },
                "payment_method_platform": {
                  "enum": ["stripe"],
                  "example": "stripe",
                  "type": "string"
                },
                "payment_method_status": {
                  "enum": ["attached", "detached"],
                  "example": "complete",
                  "type": "string"
                },
                "payment_method_type": {
                  "enum": ["card"],
                  "example": "card",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pipeline": {
        "properties": {
          "egress": {
            "items": { "$ref": "#/components/schemas/Egress" },
            "title": "Egress",
            "type": "array"
          },
          "formatting": {
            "properties": {},
            "title": "Formatting",
            "type": "object"
          },
          "processing": {
            "items": { "$ref": "#/components/schemas/Processing" },
            "title": "Processing",
            "type": "array"
          },
          "scraping": { "$ref": "#/components/schemas/Scraping" }
        },
        "required": ["scraping"],
        "title": "Pipeline",
        "type": "object"
      },
      "Processing": {
        "properties": {
          "character": {
            "example": ",",
            "title": "Character",
            "type": "string"
          },
          "error_on_fail": {
            "default": true,
            "example": true,
            "title": "Error On Fail",
            "type": "boolean"
          },
          "index": { "example": 0, "title": "Index", "type": "integer" },
          "inputs": {
            "example": ["name", "price"],
            "items": { "type": "string" },
            "title": "Inputs",
            "type": "array"
          },
          "module": {
            "example": "data_cleaning",
            "title": "Module",
            "type": "string"
          },
          "new": { "example": "new", "title": "New", "type": "string" },
          "old": { "example": "old", "title": "Old", "type": "string" },
          "outputs": {
            "example": ["name2", "price2"],
            "items": { "type": "string" },
            "title": "Outputs",
            "type": "array"
          },
          "variant": {
            "example": "replace",
            "title": "Variant",
            "type": "string"
          }
        },
        "required": ["module", "variant"],
        "title": "Processing",
        "type": "object"
      },
      "Scraping": {
        "properties": {
          "fingerprint": { "$ref": "#/components/schemas/Fingerprint" },
          "instructions": {
            "items": { "$ref": "#/components/schemas/Instruction" },
            "title": "Instructions",
            "type": "array"
          },
          "url": {
            "example": "https://www.example.com",
            "title": "Url",
            "type": "string"
          }
        },
        "required": ["url"],
        "title": "Scraping",
        "type": "object"
      },
      "Service": {
        "properties": {
          "country_id": { "example": "us", "type": "string" },
          "open_invoice_id": {
            "example": "inv_1OCNVFFKo7UQ3XWITWlqGWYQ",
            "type": "string"
          },
          "payment_method_id": {
            "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
            "type": "string"
          },
          "service_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "service_cycle": { "example": "1:month", "type": "string" },
          "service_dispatch_datetime": {
            "example": "2023-09-12T11:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "service_earliest_cancellation_datetime": {
            "example": "2023-09-12T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "service_expiry_datetime": {
            "example": "2023-10-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "service_id": { "example": "169-2109-6129", "type": "string" },
          "service_image": {
            "example": "https://example.com/image.png",
            "type": "string"
          },
          "service_is_automatic_collection": {
            "example": true,
            "type": "boolean"
          },
          "service_is_pending_cancellation": {
            "example": false,
            "type": "boolean"
          },
          "service_last_update_datetime": {
            "example": "2023-09-12T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "service_metadata": {
            "example": "[{\"resell_user_id\":\"12992-1032\"}]",
            "properties": {},
            "type": "object"
          },
          "service_name": { "example": "Basic", "type": "string" },
          "service_promotional_code": {
            "example": "PROMO2023",
            "type": "string"
          },
          "service_quantity": { "example": 5, "type": "integer" },
          "service_status": {
            "enum": [
              "awaiting_manual_fulfillment",
              "awaiting_additional_fulfillment",
              "awaiting_fulfillment",
              "active",
              "canceled",
              "complete",
              "overdue"
            ],
            "example": "active",
            "type": "string"
          },
          "service_total": { "example": 100, "type": "integer" },
          "service_type": {
            "enum": ["tokens"],
            "example": "tokens",
            "type": "string"
          },
          "subscription_schedule_id": {
            "example": "sub_sched_1OCNVFFKo7UQ3XWITWlqGWYQ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceSuccessfulRetrieveResponse": {
        "description": "Service retrieve was successful.",
        "example": {
          "data": {
            "country_id": "us",
            "open_invoice_id": "inv_1OCNVFFKo7UQ3XWITWlqGWYQ",
            "payment_method_id": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
            "service_creation_datetime": "2023-09-12T10:00:00Z",
            "service_cycle": "1:month",
            "service_dispatch_datetime": "2023-09-12T11:00:00Z",
            "service_earliest_cancellation_datetime": "2023-09-12T12:00:00Z",
            "service_expiry_datetime": "2023-10-12T10:00:00Z",
            "service_id": "169-2109-6129",
            "service_image": "https://example.com/image.png",
            "service_is_automatic_collection": true,
            "service_is_pending_cancellation": false,
            "service_last_update_datetime": "2023-09-12T12:00:00Z",
            "service_metadata": "[{\"resell_user_id\":\"12992-1032\"}]",
            "service_name": "Basic",
            "service_promotional_code": "PROMO2023",
            "service_quantity": 5,
            "service_status": "active",
            "service_total": 100,
            "service_type": "tokens",
            "subscription_schedule_id": "sub_sched_1OCNVFFKo7UQ3XWITWlqGWYQ"
          },
          "message": "Service successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Service item details.",
            "properties": {
              "country_id": { "example": "us", "type": "string" },
              "open_invoice_id": {
                "example": "inv_1OCNVFFKo7UQ3XWITWlqGWYQ",
                "type": "string"
              },
              "payment_method_id": {
                "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
                "type": "string"
              },
              "service_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "service_cycle": { "example": "1:month", "type": "string" },
              "service_dispatch_datetime": {
                "example": "2023-09-12T11:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "service_earliest_cancellation_datetime": {
                "example": "2023-09-12T12:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "service_expiry_datetime": {
                "example": "2023-10-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "service_id": { "example": "169-2109-6129", "type": "string" },
              "service_image": {
                "example": "https://example.com/image.png",
                "type": "string"
              },
              "service_is_automatic_collection": {
                "example": true,
                "type": "boolean"
              },
              "service_is_pending_cancellation": {
                "example": false,
                "type": "boolean"
              },
              "service_last_update_datetime": {
                "example": "2023-09-12T12:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "service_metadata": {
                "example": "[{\"resell_user_id\":\"12992-1032\"}]",
                "properties": {},
                "type": "object"
              },
              "service_name": { "example": "Basic", "type": "string" },
              "service_promotional_code": {
                "example": "PROMO2023",
                "type": "string"
              },
              "service_quantity": { "example": 5, "type": "integer" },
              "service_status": {
                "enum": [
                  "awaiting_manual_fulfillment",
                  "awaiting_additional_fulfillment",
                  "awaiting_fulfillment",
                  "active",
                  "canceled",
                  "complete",
                  "overdue"
                ],
                "example": "active",
                "type": "string"
              },
              "service_total": { "example": 100, "type": "integer" },
              "service_type": {
                "enum": ["tokens"],
                "example": "tokens",
                "type": "string"
              },
              "subscription_schedule_id": {
                "example": "sub_sched_1OCNVFFKo7UQ3XWITWlqGWYQ",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceSuccessfulSearchResponse": {
        "description": "Service search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "country_id": "us",
              "open_invoice_id": "inv_1OCNVFFKo7UQ3XWITWlqGWYQ",
              "payment_method_id": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
              "service_creation_datetime": "2023-09-12T10:00:00Z",
              "service_cycle": "1:month",
              "service_dispatch_datetime": "2023-09-12T11:00:00Z",
              "service_earliest_cancellation_datetime": "2023-09-12T12:00:00Z",
              "service_expiry_datetime": "2023-10-12T10:00:00Z",
              "service_id": "169-2109-6129",
              "service_image": "https://example.com/image.png",
              "service_is_automatic_collection": true,
              "service_is_pending_cancellation": false,
              "service_last_update_datetime": "2023-09-12T12:00:00Z",
              "service_metadata": "[{\"resell_user_id\":\"12992-1032\"}]",
              "service_name": "Basic",
              "service_promotional_code": "PROMO2023",
              "service_quantity": 5,
              "service_status": "active",
              "service_total": 100,
              "service_type": "tokens",
              "subscription_schedule_id": "sub_sched_1OCNVFFKo7UQ3XWITWlqGWYQ"
            }
          ],
          "message": "Service search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Service items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Service items matching the search criteria.",
            "items": {
              "properties": {
                "country_id": { "example": "us", "type": "string" },
                "open_invoice_id": {
                  "example": "inv_1OCNVFFKo7UQ3XWITWlqGWYQ",
                  "type": "string"
                },
                "payment_method_id": {
                  "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
                  "type": "string"
                },
                "service_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "service_cycle": { "example": "1:month", "type": "string" },
                "service_dispatch_datetime": {
                  "example": "2023-09-12T11:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "service_earliest_cancellation_datetime": {
                  "example": "2023-09-12T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "service_expiry_datetime": {
                  "example": "2023-10-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "service_id": { "example": "169-2109-6129", "type": "string" },
                "service_image": {
                  "example": "https://example.com/image.png",
                  "type": "string"
                },
                "service_is_automatic_collection": {
                  "example": true,
                  "type": "boolean"
                },
                "service_is_pending_cancellation": {
                  "example": false,
                  "type": "boolean"
                },
                "service_last_update_datetime": {
                  "example": "2023-09-12T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "service_metadata": {
                  "example": "[{\"resell_user_id\":\"12992-1032\"}]",
                  "properties": {},
                  "type": "object"
                },
                "service_name": { "example": "Basic", "type": "string" },
                "service_promotional_code": {
                  "example": "PROMO2023",
                  "type": "string"
                },
                "service_quantity": { "example": 5, "type": "integer" },
                "service_status": {
                  "enum": [
                    "awaiting_manual_fulfillment",
                    "awaiting_additional_fulfillment",
                    "awaiting_fulfillment",
                    "active",
                    "canceled",
                    "complete",
                    "overdue"
                  ],
                  "example": "active",
                  "type": "string"
                },
                "service_total": { "example": 100, "type": "integer" },
                "service_type": {
                  "enum": ["tokens"],
                  "example": "tokens",
                  "type": "string"
                },
                "subscription_schedule_id": {
                  "example": "sub_sched_1OCNVFFKo7UQ3XWITWlqGWYQ",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Subdivision": {
        "properties": {
          "country_id": { "example": "gb", "type": "string" },
          "subdivision_alias": { "example": "eng", "type": "string" },
          "subdivision_id": { "example": "gb-eng", "type": "string" },
          "subdivision_name": {
            "example": "\u00cele-de-France",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubdivisionSuccessfulRetrieveResponse": {
        "description": "Subdivision retrieve was successful.",
        "example": {
          "data": {
            "country_id": "gb",
            "subdivision_alias": "eng",
            "subdivision_id": "gb-eng",
            "subdivision_name": "\u00cele-de-France"
          },
          "message": "Subdivision successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Subdivision item details.",
            "properties": {
              "country_id": { "example": "gb", "type": "string" },
              "subdivision_alias": { "example": "eng", "type": "string" },
              "subdivision_id": { "example": "gb-eng", "type": "string" },
              "subdivision_name": {
                "example": "\u00cele-de-France",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubdivisionSuccessfulSearchResponse": {
        "description": "Subdivision search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "country_id": "gb",
              "subdivision_alias": "eng",
              "subdivision_id": "gb-eng",
              "subdivision_name": "\u00cele-de-France"
            }
          ],
          "message": "Subdivision search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Subdivision items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Subdivision items matching the search criteria.",
            "items": {
              "properties": {
                "country_id": { "example": "gb", "type": "string" },
                "subdivision_alias": { "example": "eng", "type": "string" },
                "subdivision_id": { "example": "gb-eng", "type": "string" },
                "subdivision_name": {
                  "example": "\u00cele-de-France",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionSchedule": {
        "properties": {
          "service_subscription_id": {
            "example": "sub_1NpPVfB2BUlqim5lA374YoIh",
            "type": "string"
          },
          "subscription_schedule_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "subscription_schedule_datetime": {
            "example": "2023-09-15T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "subscription_schedule_id": {
            "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
            "type": "string"
          },
          "subscription_schedule_is_administrator": {
            "example": false,
            "type": "boolean"
          },
          "subscription_schedule_last_update_datetime": {
            "example": "2023-09-12T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "subscription_schedule_status": {
            "enum": [
              "not_started",
              "active",
              "completed",
              "released",
              "canceled"
            ],
            "example": "active",
            "type": "string"
          },
          "subscription_schedule_type": {
            "enum": [
              "end_of_introductory_offer",
              "change_price",
              "increase_quantity",
              "decrease_quantity",
              "increase_quantity_change_price",
              "decrease_quantity_change_price"
            ],
            "example": "upgrade",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionScheduleSuccessfulDeleteResponse": {
        "description": "SubscriptionSchedule deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "SubscriptionSchedule deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted SubscriptionSchedule IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionScheduleSuccessfulRetrieveResponse": {
        "description": "SubscriptionSchedule retrieve was successful.",
        "example": {
          "data": {
            "service_subscription_id": "sub_1NpPVfB2BUlqim5lA374YoIh",
            "subscription_schedule_creation_datetime": "2023-09-12T10:00:00Z",
            "subscription_schedule_datetime": "2023-09-15T10:00:00Z",
            "subscription_schedule_id": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
            "subscription_schedule_is_administrator": false,
            "subscription_schedule_last_update_datetime": "2023-09-12T12:00:00Z",
            "subscription_schedule_status": "active",
            "subscription_schedule_type": "upgrade"
          },
          "message": "SubscriptionSchedule successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved SubscriptionSchedule item details.",
            "properties": {
              "service_subscription_id": {
                "example": "sub_1NpPVfB2BUlqim5lA374YoIh",
                "type": "string"
              },
              "subscription_schedule_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "subscription_schedule_datetime": {
                "example": "2023-09-15T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "subscription_schedule_id": {
                "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
                "type": "string"
              },
              "subscription_schedule_is_administrator": {
                "example": false,
                "type": "boolean"
              },
              "subscription_schedule_last_update_datetime": {
                "example": "2023-09-12T12:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "subscription_schedule_status": {
                "enum": [
                  "not_started",
                  "active",
                  "completed",
                  "released",
                  "canceled"
                ],
                "example": "active",
                "type": "string"
              },
              "subscription_schedule_type": {
                "enum": [
                  "end_of_introductory_offer",
                  "change_price",
                  "increase_quantity",
                  "decrease_quantity",
                  "increase_quantity_change_price",
                  "decrease_quantity_change_price"
                ],
                "example": "upgrade",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionScheduleSuccessfulSearchResponse": {
        "description": "SubscriptionSchedule search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "service_subscription_id": "sub_1NpPVfB2BUlqim5lA374YoIh",
              "subscription_schedule_creation_datetime": "2023-09-12T10:00:00Z",
              "subscription_schedule_datetime": "2023-09-15T10:00:00Z",
              "subscription_schedule_id": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
              "subscription_schedule_is_administrator": false,
              "subscription_schedule_last_update_datetime": "2023-09-12T12:00:00Z",
              "subscription_schedule_status": "active",
              "subscription_schedule_type": "upgrade"
            }
          ],
          "message": "SubscriptionSchedule search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of SubscriptionSchedule items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of SubscriptionSchedule items matching the search criteria.",
            "items": {
              "properties": {
                "service_subscription_id": {
                  "example": "sub_1NpPVfB2BUlqim5lA374YoIh",
                  "type": "string"
                },
                "subscription_schedule_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "subscription_schedule_datetime": {
                  "example": "2023-09-15T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "subscription_schedule_id": {
                  "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
                  "type": "string"
                },
                "subscription_schedule_is_administrator": {
                  "example": false,
                  "type": "boolean"
                },
                "subscription_schedule_last_update_datetime": {
                  "example": "2023-09-12T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "subscription_schedule_status": {
                  "enum": [
                    "not_started",
                    "active",
                    "completed",
                    "released",
                    "canceled"
                  ],
                  "example": "active",
                  "type": "string"
                },
                "subscription_schedule_type": {
                  "enum": [
                    "end_of_introductory_offer",
                    "change_price",
                    "increase_quantity",
                    "decrease_quantity",
                    "increase_quantity_change_price",
                    "decrease_quantity_change_price"
                  ],
                  "example": "upgrade",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Task": {
        "properties": {
          "job_run_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "project_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "task_bytes": { "example": 0, "type": "integer" },
          "task_captchas": { "example": 0, "type": "integer" },
          "task_class": {
            "enum": [
              "residential_js_enabled",
              "residential_js_disabled",
              "datacenter_js_enabled",
              "datacenter_js_disabled",
              "isp_js_enabled",
              "isp_js_disabled"
            ],
            "example": "datacenter_js_enabled",
            "type": "string"
          },
          "task_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_duration": { "example": 0, "type": "integer" },
          "task_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "task_js_rendering": { "example": false, "type": "boolean" },
          "task_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_pipeline": { "example": "", "type": "string" },
          "task_retries": { "example": 0, "type": "integer" },
          "task_scheduled_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_status": {
            "enum": ["pending", "running", "failed", "complete"],
            "example": "pending",
            "type": "string"
          },
          "task_status_code": { "example": 200, "type": "integer" },
          "task_token_cost": { "example": 500, "type": "integer" },
          "task_url": { "example": "https://example.com", "type": "string" }
        },
        "type": "object"
      },
      "TaskInput": {
        "properties": {
          "metadata": { "$ref": "#/components/schemas/Metadata" },
          "pipeline": { "$ref": "#/components/schemas/Pipeline" }
        },
        "title": "TaskInput",
        "type": "object"
      },
      "TaskOutput": {
        "properties": {
          "error": { "properties": {}, "title": "Error", "type": "object" },
          "metadata": { "$ref": "#/components/schemas/Metadata" },
          "output": { "properties": {}, "title": "Output", "type": "object" },
          "pipeline": { "$ref": "#/components/schemas/Pipeline" }
        },
        "required": ["metadata"],
        "title": "TaskOutput",
        "type": "object"
      },
      "TaskSuccessfulRetrieveResponse": {
        "description": "Task retrieve was successful.",
        "example": {
          "data": {
            "job_run_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "task_bytes": 0,
            "task_captchas": 0,
            "task_class": "datacenter_js_enabled",
            "task_creation_datetime": "2023-09-12T10:00:00Z",
            "task_duration": 0,
            "task_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "task_js_rendering": false,
            "task_last_update_datetime": "2023-09-12T10:00:00Z",
            "task_pipeline": {},
            "task_retries": 0,
            "task_scheduled_datetime": "2023-09-12T10:00:00Z",
            "task_status": "pending",
            "task_status_code": 200,
            "task_token_cost": 500,
            "task_url": "https://example.com"
          },
          "message": "Task successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Task item details.",
            "properties": {
              "job_run_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "project_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "task_bytes": { "example": 0, "type": "integer" },
              "task_captchas": { "example": 0, "type": "integer" },
              "task_class": {
                "enum": [
                  "residential_js_enabled",
                  "residential_js_disabled",
                  "datacenter_js_enabled",
                  "datacenter_js_disabled",
                  "isp_js_enabled",
                  "isp_js_disabled"
                ],
                "example": "datacenter_js_enabled",
                "type": "string"
              },
              "task_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_duration": { "example": 0, "type": "integer" },
              "task_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "task_js_rendering": { "example": false, "type": "boolean" },
              "task_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_pipeline": { "example": "", "type": "string" },
              "task_retries": { "example": 0, "type": "integer" },
              "task_scheduled_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_status": {
                "enum": ["pending", "running", "failed", "complete"],
                "example": "pending",
                "type": "string"
              },
              "task_status_code": { "example": 200, "type": "integer" },
              "task_token_cost": { "example": 500, "type": "integer" },
              "task_url": { "example": "https://example.com", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskSuccessfulSearchResponse": {
        "description": "Task search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "job_run_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "task_bytes": 0,
              "task_captchas": 0,
              "task_class": "datacenter_js_enabled",
              "task_creation_datetime": "2023-09-12T10:00:00Z",
              "task_duration": 0,
              "task_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "task_js_rendering": false,
              "task_last_update_datetime": "2023-09-12T10:00:00Z",
              "task_pipeline": {},
              "task_retries": 0,
              "task_scheduled_datetime": "2023-09-12T10:00:00Z",
              "task_status": "pending",
              "task_status_code": 200,
              "task_token_cost": 500,
              "task_url": "https://example.com"
            }
          ],
          "message": "Task search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Task items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Task items matching the search criteria.",
            "items": {
              "properties": {
                "job_run_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "project_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "task_bytes": { "example": 0, "type": "integer" },
                "task_captchas": { "example": 0, "type": "integer" },
                "task_class": {
                  "enum": [
                    "residential_js_enabled",
                    "residential_js_disabled",
                    "datacenter_js_enabled",
                    "datacenter_js_disabled",
                    "isp_js_enabled",
                    "isp_js_disabled"
                  ],
                  "example": "datacenter_js_enabled",
                  "type": "string"
                },
                "task_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_duration": { "example": 0, "type": "integer" },
                "task_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "task_js_rendering": { "example": false, "type": "boolean" },
                "task_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_pipeline": { "example": "", "type": "string" },
                "task_retries": { "example": 0, "type": "integer" },
                "task_scheduled_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_status": {
                  "enum": ["pending", "running", "failed", "complete"],
                  "example": "pending",
                  "type": "string"
                },
                "task_status_code": { "example": 200, "type": "integer" },
                "task_token_cost": { "example": 500, "type": "integer" },
                "task_url": {
                  "example": "https://example.com",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskSummary": {
        "properties": {
          "job_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "project_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "task_summary_bytes": { "example": 0, "type": "integer" },
          "task_summary_captchas": { "example": 3, "type": "integer" },
          "task_summary_class": {
            "enum": [
              "residential_js_enabled",
              "residential_js_disabled",
              "datacenter_js_enabled",
              "datacenter_js_disabled",
              "isp_js_enabled",
              "isp_js_disabled"
            ],
            "example": "datacenter_js_enabled",
            "type": "string"
          },
          "task_summary_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_summary_domain": { "example": "example.com", "type": "string" },
          "task_summary_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "task_summary_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_summary_paid_failures": { "example": 1, "type": "integer" },
          "task_summary_period": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "task_summary_successful": { "example": 2, "type": "integer" },
          "task_summary_token_cost": { "example": 500, "type": "integer" },
          "task_summary_unpaid_failures": { "example": 4, "type": "integer" }
        },
        "type": "object"
      },
      "TaskSummarySuccessfulRetrieveResponse": {
        "description": "TaskSummary retrieve was successful.",
        "example": {
          "data": {
            "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "task_summary_bytes": 0,
            "task_summary_captchas": 3,
            "task_summary_class": "datacenter_js_enabled",
            "task_summary_creation_datetime": "2023-09-12T10:00:00Z",
            "task_summary_domain": "example.com",
            "task_summary_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "task_summary_last_update_datetime": "2023-09-12T10:00:00Z",
            "task_summary_paid_failures": 1,
            "task_summary_period": "2023-09-12T10:00:00Z",
            "task_summary_successful": 2,
            "task_summary_token_cost": 500,
            "task_summary_unpaid_failures": 4
          },
          "message": "TaskSummary successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved TaskSummary item details.",
            "properties": {
              "job_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "project_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "task_summary_bytes": { "example": 0, "type": "integer" },
              "task_summary_captchas": { "example": 3, "type": "integer" },
              "task_summary_class": {
                "enum": [
                  "residential_js_enabled",
                  "residential_js_disabled",
                  "datacenter_js_enabled",
                  "datacenter_js_disabled",
                  "isp_js_enabled",
                  "isp_js_disabled"
                ],
                "example": "datacenter_js_enabled",
                "type": "string"
              },
              "task_summary_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_summary_domain": {
                "example": "example.com",
                "type": "string"
              },
              "task_summary_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "task_summary_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_summary_paid_failures": { "example": 1, "type": "integer" },
              "task_summary_period": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "task_summary_successful": { "example": 2, "type": "integer" },
              "task_summary_token_cost": { "example": 500, "type": "integer" },
              "task_summary_unpaid_failures": {
                "example": 4,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskSummarySuccessfulSearchResponse": {
        "description": "TaskSummary search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "job_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "project_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "task_summary_bytes": 0,
              "task_summary_captchas": 3,
              "task_summary_class": "datacenter_js_enabled",
              "task_summary_creation_datetime": "2023-09-12T10:00:00Z",
              "task_summary_domain": "example.com",
              "task_summary_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "task_summary_last_update_datetime": "2023-09-12T10:00:00Z",
              "task_summary_paid_failures": 1,
              "task_summary_period": "2023-09-12T10:00:00Z",
              "task_summary_successful": 2,
              "task_summary_token_cost": 500,
              "task_summary_unpaid_failures": 4
            }
          ],
          "message": "TaskSummary search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of TaskSummary items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of TaskSummary items matching the search criteria.",
            "items": {
              "properties": {
                "job_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "project_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "task_summary_bytes": { "example": 0, "type": "integer" },
                "task_summary_captchas": { "example": 3, "type": "integer" },
                "task_summary_class": {
                  "enum": [
                    "residential_js_enabled",
                    "residential_js_disabled",
                    "datacenter_js_enabled",
                    "datacenter_js_disabled",
                    "isp_js_enabled",
                    "isp_js_disabled"
                  ],
                  "example": "datacenter_js_enabled",
                  "type": "string"
                },
                "task_summary_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_summary_domain": {
                  "example": "example.com",
                  "type": "string"
                },
                "task_summary_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "task_summary_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_summary_paid_failures": {
                  "example": 1,
                  "type": "integer"
                },
                "task_summary_period": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "task_summary_successful": { "example": 2, "type": "integer" },
                "task_summary_token_cost": {
                  "example": 500,
                  "type": "integer"
                },
                "task_summary_unpaid_failures": {
                  "example": 4,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Template": {
        "properties": {
          "organization_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "template_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "template_description": {
            "example": "This is a template description.",
            "type": "string"
          },
          "template_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "template_json": { "example": "", "type": "string" },
          "template_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "template_name": { "example": "My Template", "type": "string" }
        },
        "type": "object"
      },
      "TemplateSuccessfulDeleteResponse": {
        "description": "Template deletion was successful.",
        "example": {
          "deleted": [123],
          "message": "Template deletion successful."
        },
        "properties": {
          "deleted": {
            "description": "Array of deleted Template IDs.",
            "items": { "type": "integer" },
            "type": "array"
          },
          "message": {
            "description": "Status message for the deletion.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TemplateSuccessfulRetrieveResponse": {
        "description": "Template retrieve was successful.",
        "example": {
          "data": {
            "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "template_creation_datetime": "2023-09-12T10:00:00Z",
            "template_description": "This is a template description.",
            "template_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "template_json": { "key": "value" },
            "template_last_update_datetime": "2023-09-12T10:00:00Z",
            "template_name": "My Template"
          },
          "message": "Template successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Template item details.",
            "properties": {
              "organization_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "template_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "template_description": {
                "example": "This is a template description.",
                "type": "string"
              },
              "template_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "template_json": { "example": "", "type": "string" },
              "template_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "template_name": { "example": "My Template", "type": "string" }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TemplateSuccessfulSearchResponse": {
        "description": "Template search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "organization_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "template_creation_datetime": "2023-09-12T10:00:00Z",
              "template_description": "This is a template description.",
              "template_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "template_json": { "key": "value" },
              "template_last_update_datetime": "2023-09-12T10:00:00Z",
              "template_name": "My Template"
            }
          ],
          "message": "Template search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Template items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Template items matching the search criteria.",
            "items": {
              "properties": {
                "organization_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "template_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "template_description": {
                  "example": "This is a template description.",
                  "type": "string"
                },
                "template_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "template_json": { "example": "", "type": "string" },
                "template_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "template_name": { "example": "My Template", "type": "string" }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenLedger": {
        "properties": {
          "organization_id": {
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string"
          },
          "service_adjustment_id": { "example": 10, "type": "integer" },
          "service_id": { "example": "012-123-392", "type": "string" },
          "token_ledger_amount": { "example": 100, "type": "integer" },
          "token_ledger_creation_datetime": {
            "example": "2023-04-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "token_ledger_id": { "example": "123", "type": "string" },
          "token_ledger_last_update_datetime": {
            "example": "2023-04-02T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "token_ledger_period_date": {
            "example": "2023-10-01",
            "type": "string"
          },
          "token_ledger_reason": {
            "example": "Adjustment Reason",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenLedgerSuccessfulRetrieveResponse": {
        "description": "TokenLedger retrieve was successful.",
        "example": {
          "data": {
            "organization_id": "123e4567-e89b-12d3-a456-426614174000",
            "service_adjustment_id": 10,
            "service_id": "012-123-392",
            "token_ledger_amount": 100,
            "token_ledger_creation_datetime": "2023-04-01T12:00:00Z",
            "token_ledger_id": 123,
            "token_ledger_last_update_datetime": "2023-04-02T12:00:00Z",
            "token_ledger_period_date": "2023-10-01",
            "token_ledger_reason": "Adjustment Reason"
          },
          "message": "TokenLedger successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved TokenLedger item details.",
            "properties": {
              "organization_id": {
                "example": "123e4567-e89b-12d3-a456-426614174000",
                "type": "string"
              },
              "service_adjustment_id": { "example": 10, "type": "integer" },
              "service_id": { "example": "012-123-392", "type": "string" },
              "token_ledger_amount": { "example": 100, "type": "integer" },
              "token_ledger_creation_datetime": {
                "example": "2023-04-01T12:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "token_ledger_id": { "example": "123", "type": "string" },
              "token_ledger_last_update_datetime": {
                "example": "2023-04-02T12:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "token_ledger_period_date": {
                "example": "2023-10-01",
                "type": "string"
              },
              "token_ledger_reason": {
                "example": "Adjustment Reason",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenLedgerSuccessfulSearchResponse": {
        "description": "TokenLedger search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "organization_id": "123e4567-e89b-12d3-a456-426614174000",
              "service_adjustment_id": 10,
              "service_id": "012-123-392",
              "token_ledger_amount": 100,
              "token_ledger_creation_datetime": "2023-04-01T12:00:00Z",
              "token_ledger_id": 123,
              "token_ledger_last_update_datetime": "2023-04-02T12:00:00Z",
              "token_ledger_period_date": "2023-10-01",
              "token_ledger_reason": "Adjustment Reason"
            }
          ],
          "message": "TokenLedger search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of TokenLedger items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of TokenLedger items matching the search criteria.",
            "items": {
              "properties": {
                "organization_id": {
                  "example": "123e4567-e89b-12d3-a456-426614174000",
                  "type": "string"
                },
                "service_adjustment_id": { "example": 10, "type": "integer" },
                "service_id": { "example": "012-123-392", "type": "string" },
                "token_ledger_amount": { "example": 100, "type": "integer" },
                "token_ledger_creation_datetime": {
                  "example": "2023-04-01T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "token_ledger_id": { "example": "123", "type": "string" },
                "token_ledger_last_update_datetime": {
                  "example": "2023-04-02T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "token_ledger_period_date": {
                  "example": "2023-10-01",
                  "type": "string"
                },
                "token_ledger_reason": {
                  "example": "Adjustment Reason",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "invoice_id": {
            "example": "in_1NpRIvB2BUlqim5lN4v3URka",
            "type": "string"
          },
          "payment_method_id": {
            "example": "pm_1NSx6OB2BUlqim5luefrhr",
            "type": "string"
          },
          "transaction_amount": { "example": 100, "type": "integer" },
          "transaction_amount_alternate": {
            "example": 100.5,
            "type": "number"
          },
          "transaction_completed_datetime": {
            "example": "2023-09-14T19:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "transaction_creation_datetime": {
            "example": "2023-09-14T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "transaction_currency": { "example": "usd", "type": "string" },
          "transaction_id": {
            "example": "pi_3NpRaZB2BUlqim5l10FDVxnf",
            "type": "string"
          },
          "transaction_last_update_datetime": {
            "example": "2023-09-15T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "transaction_method": {
            "enum": ["card", "cryptocurrency"],
            "example": "card",
            "type": "string"
          },
          "transaction_processor": {
            "enum": ["stripe", "bitpay", "coinpayments"],
            "example": "stripe",
            "type": "string"
          },
          "transaction_refund_amount": { "example": 0, "type": "integer" },
          "transaction_refund_datetime": {
            "example": "2023-09-20T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "transaction_refund_reason": {
            "example": "Too Expensive",
            "type": "string"
          },
          "transaction_status": {
            "enum": ["succeeded", "processing", "failed", "refunded"],
            "example": "complete",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionSuccessfulRetrieveResponse": {
        "description": "Transaction retrieve was successful.",
        "example": {
          "data": {
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
            "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
            "transaction_amount": 100,
            "transaction_amount_alternate": 100.5,
            "transaction_completed_datetime": "2023-09-14T19:30:00Z",
            "transaction_creation_datetime": "2023-09-14T18:30:00Z",
            "transaction_currency": "usd",
            "transaction_id": "pi_3NpRaZB2BUlqim5l10FDVxnf",
            "transaction_last_update_datetime": "2023-09-15T18:30:00Z",
            "transaction_method": "card",
            "transaction_processor": "stripe",
            "transaction_refund_amount": 0,
            "transaction_refund_datetime": "2023-09-20T18:30:00Z",
            "transaction_refund_reason": "Too Expensive",
            "transaction_status": "complete"
          },
          "message": "Transaction successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved Transaction item details.",
            "properties": {
              "invoice_id": {
                "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                "type": "string"
              },
              "payment_method_id": {
                "example": "pm_1NSx6OB2BUlqim5luefrhr",
                "type": "string"
              },
              "transaction_amount": { "example": 100, "type": "integer" },
              "transaction_amount_alternate": {
                "example": 100.5,
                "type": "number"
              },
              "transaction_completed_datetime": {
                "example": "2023-09-14T19:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "transaction_creation_datetime": {
                "example": "2023-09-14T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "transaction_currency": { "example": "usd", "type": "string" },
              "transaction_id": {
                "example": "pi_3NpRaZB2BUlqim5l10FDVxnf",
                "type": "string"
              },
              "transaction_last_update_datetime": {
                "example": "2023-09-15T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "transaction_method": {
                "enum": ["card", "cryptocurrency"],
                "example": "card",
                "type": "string"
              },
              "transaction_processor": {
                "enum": ["stripe", "bitpay", "coinpayments"],
                "example": "stripe",
                "type": "string"
              },
              "transaction_refund_amount": { "example": 0, "type": "integer" },
              "transaction_refund_datetime": {
                "example": "2023-09-20T18:30:00Z",
                "format": "date-time",
                "type": "string"
              },
              "transaction_refund_reason": {
                "example": "Too Expensive",
                "type": "string"
              },
              "transaction_status": {
                "enum": ["succeeded", "processing", "failed", "refunded"],
                "example": "complete",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionSuccessfulSearchResponse": {
        "description": "Transaction search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
              "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
              "transaction_amount": 100,
              "transaction_amount_alternate": 100.5,
              "transaction_completed_datetime": "2023-09-14T19:30:00Z",
              "transaction_creation_datetime": "2023-09-14T18:30:00Z",
              "transaction_currency": "usd",
              "transaction_id": "pi_3NpRaZB2BUlqim5l10FDVxnf",
              "transaction_last_update_datetime": "2023-09-15T18:30:00Z",
              "transaction_method": "card",
              "transaction_processor": "stripe",
              "transaction_refund_amount": 0,
              "transaction_refund_datetime": "2023-09-20T18:30:00Z",
              "transaction_refund_reason": "Too Expensive",
              "transaction_status": "complete"
            }
          ],
          "message": "Transaction search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of Transaction items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of Transaction items matching the search criteria.",
            "items": {
              "properties": {
                "invoice_id": {
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka",
                  "type": "string"
                },
                "payment_method_id": {
                  "example": "pm_1NSx6OB2BUlqim5luefrhr",
                  "type": "string"
                },
                "transaction_amount": { "example": 100, "type": "integer" },
                "transaction_amount_alternate": {
                  "example": 100.5,
                  "type": "number"
                },
                "transaction_completed_datetime": {
                  "example": "2023-09-14T19:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "transaction_creation_datetime": {
                  "example": "2023-09-14T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "transaction_currency": { "example": "usd", "type": "string" },
                "transaction_id": {
                  "example": "pi_3NpRaZB2BUlqim5l10FDVxnf",
                  "type": "string"
                },
                "transaction_last_update_datetime": {
                  "example": "2023-09-15T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "transaction_method": {
                  "enum": ["card", "cryptocurrency"],
                  "example": "card",
                  "type": "string"
                },
                "transaction_processor": {
                  "enum": ["stripe", "bitpay", "coinpayments"],
                  "example": "stripe",
                  "type": "string"
                },
                "transaction_refund_amount": {
                  "example": 0,
                  "type": "integer"
                },
                "transaction_refund_datetime": {
                  "example": "2023-09-20T18:30:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "transaction_refund_reason": {
                  "example": "Too Expensive",
                  "type": "string"
                },
                "transaction_status": {
                  "enum": ["succeeded", "processing", "failed", "refunded"],
                  "example": "complete",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TwoFactorAuthenticationRequired": {
        "description": "Two-Factor Authentication Required",
        "example": {
          "error": "Two-Factor Authentication Required",
          "message": "This action requires Two-Factor Authentication. Please retry request with Two-Factor Authentication keys.",
          "two_factor_authentication_public_key": "1234567890",
          "two_factor_authentication_service": "email",
          "two_factor_authentication_target": "e******@pingproxies.com"
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Two Factor Authentication Required",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "Please retry request with Two-Factor Authentication keys.",
            "type": "string"
          },
          "two_factor_authentication_public_key": {
            "description": "Public key for Two-Factor Authentication.",
            "example": "1234567890",
            "type": "string"
          },
          "two_factor_authentication_service": {
            "description": "Service used for Two-Factor Authentication.",
            "example": "email",
            "type": "string"
          },
          "two_factor_authentication_target": {
            "description": "The target which the two_factor_authentication_private_key has been sent to.",
            "example": "e******@pingproxies.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized",
        "example": {
          "error": "Unauthorized",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "You need to be authenticated to access this resource."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Unauthorized",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "You need to be authenticated to access this resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UnprocessableResponse": {
        "description": "Unprocessable",
        "example": {
          "error": "Unprocessable",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The data provided is valid but can't be processed due to failing business logic."
        },
        "properties": {
          "error": {
            "description": "Error type",
            "example": "Unprocessable",
            "type": "string"
          },
          "error_id": {
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "example": "The data provided is valid but can't be processed due to failing business logic.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "user_affiliate_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "user_analytics_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "user_creation_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "user_email_address": {
            "example": "john.doe@example.com",
            "type": "string"
          },
          "user_first_name": { "example": "John", "type": "string" },
          "user_id": {
            "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "type": "string"
          },
          "user_last_login_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "user_last_name": { "example": "Doe", "type": "string" },
          "user_last_update_datetime": {
            "example": "2023-09-12T10:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "user_phone_number": { "type": "string" },
          "user_profile_image_url": {
            "example": "https://example.com/image.png",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSuccessfulRetrieveResponse": {
        "description": "User retrieve was successful.",
        "example": {
          "data": {
            "user_affiliate_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "user_analytics_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "user_creation_datetime": "2023-09-12T10:00:00Z",
            "user_email_address": "john.doe@example.com",
            "user_first_name": "John",
            "user_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
            "user_last_login_datetime": "2023-09-12T10:00:00Z",
            "user_last_name": "Doe",
            "user_last_update_datetime": "2023-09-12T10:00:00Z",
            "user_profile_image_url": "https://example.com/image.png"
          },
          "message": "User successfully retrieved."
        },
        "properties": {
          "data": {
            "description": "Retrieved User item details.",
            "properties": {
              "user_affiliate_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "user_analytics_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "user_creation_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "user_email_address": {
                "example": "john.doe@example.com",
                "type": "string"
              },
              "user_first_name": { "example": "John", "type": "string" },
              "user_id": {
                "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                "type": "string"
              },
              "user_last_login_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "user_last_name": { "example": "Doe", "type": "string" },
              "user_last_update_datetime": {
                "example": "2023-09-12T10:00:00Z",
                "format": "date-time",
                "type": "string"
              },
              "user_phone_number": { "type": "string" },
              "user_profile_image_url": {
                "example": "https://example.com/image.png",
                "type": "string"
              }
            },
            "type": "object"
          },
          "message": {
            "description": "Status message for the retrieval.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSuccessfulSearchResponse": {
        "description": "User search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "user_affiliate_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "user_analytics_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "user_creation_datetime": "2023-09-12T10:00:00Z",
              "user_email_address": "john.doe@example.com",
              "user_first_name": "John",
              "user_id": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
              "user_last_login_datetime": "2023-09-12T10:00:00Z",
              "user_last_name": "Doe",
              "user_last_update_datetime": "2023-09-12T10:00:00Z",
              "user_profile_image_url": "https://example.com/image.png"
            }
          ],
          "message": "User search successful."
        },
        "properties": {
          "count": {
            "description": "Total number of User items returned.",
            "type": "integer"
          },
          "data": {
            "description": "Array of User items matching the search criteria.",
            "items": {
              "properties": {
                "user_affiliate_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "user_analytics_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "user_creation_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "user_email_address": {
                  "example": "john.doe@example.com",
                  "type": "string"
                },
                "user_first_name": { "example": "John", "type": "string" },
                "user_id": {
                  "example": "8f8f385a-59a2-4c4c-93ec-6d319b793e83",
                  "type": "string"
                },
                "user_last_login_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "user_last_name": { "example": "Doe", "type": "string" },
                "user_last_update_datetime": {
                  "example": "2023-09-12T10:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "user_phone_number": { "type": "string" },
                "user_profile_image_url": {
                  "example": "https://example.com/image.png",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "Status message for the search.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "type": "object" },
            "title": "Location",
            "type": "array"
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        },
        "required": ["loc", "msg", "type"],
        "title": "ValidationError",
        "type": "object"
      }
    },
    "securitySchemes": {
      "APIPrivateKey": {
        "description": " Private API key for user-level authentication.",
        "in": "header",
        "name": "X-API-Private-Key",
        "type": "apiKey"
      },
      "APIPublicKey": {
        "description": " Public API key for user-level authentication.",
        "in": "header",
        "name": "X-API-Public-Key",
        "type": "apiKey"
      },
      "ApplicationAPIPrivateKey": {
        "description": "Private API key for application-level authentication.",
        "in": "header",
        "name": "X-Application-API-Private-Key",
        "type": "apiKey"
      },
      "ApplicationAPIPublicKey": {
        "description": "Public API key for application-level authentication.",
        "in": "header",
        "name": "X-Application-API-Public-Key",
        "type": "apiKey"
      },
      "BearerAuth": {
        "description": "JWT token provided in the 'Authorization' header for user-level authentication. Format as: Bearer [token]",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "CookieAuth": {
        "description": "JWT token stored in a cookie named 'access_token_cookie' for user-level authentication.",
        "in": "header",
        "name": "access_token_cookie",
        "type": "apiKey"
      }
    }
  },
  "externalDocs": {
    "description": "General API Documentation & Concepts",
    "url": "http://api.bloxed.com/"
  },
  "info": {
    "contact": {
      "email": "developer@bloxed.com",
      "url": "https://www.bloxed.com"
    },
    "description": "API used for internal user-facing applications.",
    "termsOfService": "https://www.bloxed.com",
    "title": "Bloxed Private User API",
    "version": "1.0",
    "x-logo": {
      "altText": "Bloxed",
      "backgroundColor": "#228C22",
      "url": "https://pbs.twimg.com/profile_banners/1038803520605118464/1618327011/1500x500"
    }
  },
  "openapi": "3.0.1",
  "paths": {
    "/private/unrestricted/utilities/countries": {
      "get": {
        "description": "Retrieves a list of Country ISO Codes with their respective details, including alpha codes, calling codes, and subdivisions.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": {
                      "United Kingdom": {
                        "alpha_2": "GB",
                        "alpha_3": "GBR",
                        "calling_code": "+44",
                        "subdivisions": ["London", "Manchester", "Birmingham"]
                      },
                      "United States": {
                        "alpha_2": "US",
                        "alpha_3": "USA",
                        "calling_code": "+1",
                        "subdivisions": ["Iowa", "Nevada", "Idaho"]
                      }
                    },
                    "message": "Countries successfully retrieved."
                  },
                  "properties": {
                    "data": {
                      "additionalProperties": {
                        "properties": {
                          "alpha_2": { "example": "gb", "type": "string" },
                          "alpha_3": { "example": "gbr", "type": "string" },
                          "calling_code": {
                            "example": "+44",
                            "type": "string"
                          },
                          "subdivisions": {
                            "items": { "example": "London", "type": "string" },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Countries succesfully retrieved.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Countries successfully retrieved."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve ISO Country Codes",
        "tags": ["Utilities"]
      }
    },
    "/private/unrestricted/utilities/geolocation/{ip_address}": {
      "get": {
        "description": "Retrieves geolocation information for a given IP address using the MaxMind service. The response includes both external data provided by MaxMind and internal data derived from internal databases.\n",
        "parameters": [
          {
            "description": "IP address for which geolocation information is required",
            "in": "path",
            "name": "ip_address",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "external": {
                          "description": "External geolocation data from MaxMind.",
                          "properties": {
                            "asn_id": { "type": "string" },
                            "city_name": { "type": "string" },
                            "continent_id": { "type": "string" },
                            "continent_name": { "type": "string" },
                            "country_id": { "type": "string" },
                            "country_name": { "type": "string" },
                            "latitude": { "type": "number" },
                            "longitude": { "type": "number" },
                            "timezone": { "type": "string" },
                            "zip_code": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "internal": {
                          "description": "Internal geolocation data derived from internal databases.",
                          "properties": {
                            "asn": { "properties": {}, "type": "object" },
                            "city": { "properties": {}, "type": "object" },
                            "continent": { "properties": {}, "type": "object" },
                            "country": { "properties": {}, "type": "object" },
                            "ip_address": { "type": "string" },
                            "subdivision": {
                              "properties": {},
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "IP Address geolocation successfully retrieved.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "IP Address geolocation successfully retrieved."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve IP Address Geolocation",
        "tags": ["Utilities"]
      }
    },
    "/private/unrestricted/utilities/languages": {
      "get": {
        "description": "Retrieves ISO language codes and their corresponding language names.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "additionalProperties": { "type": "string" },
                      "example": {
                        "Abkhazian": "ab",
                        "Afar": "aa",
                        "Afrikaans": "af",
                        "Akan": "ak",
                        "Albanian": "sq",
                        "Amharic": "am",
                        "Arabic": "ar",
                        "Aragonese": "an",
                        "Armenian": "hy"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Languages succesfully retrieved.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Languages successfully retrieved."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve ISO Language Codes",
        "tags": ["Utilities"]
      }
    },
    "/private/user/api_key/create": {
      "post": {
        "description": "Allows a user to create a new API Key for their account. The system limits the number of active API keys per user. If the maximum number is reached, the user must remove an existing key before they can generate a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "api_key_label": {
                    "description": "Label for the API Key.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The API Key creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "data": {
                    "api_key_private_key": "X9akD14swPxtoRtCFVLt00EgtlFha5freNLWIr87nBDK3YfIfopULr7LpiNdHFrd",
                    "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42"
                  },
                  "message": "API Key successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created API key.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "data": {
                      "properties": {
                        "api_key_private_key": {
                          "description": "The API key private key string.",
                          "type": "string"
                        },
                        "api_key_public_key": {
                          "description": "The API key public key string.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "API Key Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max API Keys Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create API Key",
        "tags": ["API Key"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/api_key/delete/{api_key_id}": {
      "delete": {
        "description": "Allows a user to delete an existing API Key associated with their account. The system sets the status of the API key to \"deleted\".\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the API key to delete.",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeySuccessfulDeleteResponse"
                }
              }
            },
            "description": "API Key Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No API Key with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete API Key",
        "tags": ["API Key"]
      }
    },
    "/private/user/api_key/retrieve/{api_key_id}": {
      "get": {
        "description": "Retrieves a specific API Key based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the API Key to retrieve",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiKeySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful API Key Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "API Key Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve API Key",
        "tags": ["API Key"]
      }
    },
    "/private/user/api_key/search": {
      "get": {
        "description": "Search API Keys on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the API key",
            "in": "query",
            "name": "api_key_id",
            "schema": {}
          },
          {
            "description": "Status of the API key.",
            "in": "query",
            "name": "api_key_status",
            "schema": { "enum": ["deleted", "active"], "type": "string" }
          },
          {
            "description": "Preview of the API key",
            "in": "query",
            "name": "api_key_private_key_preview",
            "schema": { "type": "string" }
          },
          {
            "description": "Scope of the API key",
            "in": "query",
            "name": "api_key_scope",
            "schema": { "type": "string" }
          },
          {
            "description": "Label of the API key",
            "in": "query",
            "name": "api_key_label",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the API key was created",
            "in": "query",
            "name": "api_key_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the API key was last updated",
            "in": "query",
            "name": "api_key_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiKeySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful API Key search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search API Keys",
        "tags": ["API Key"]
      }
    },
    "/private/user/api_request/analytics": {
      "get": {
        "description": "This endpoint analyzes API request data for a given user over a specified time range and interval. It returns a summary including the total number of requests, errors, and successful requests, broken down by the specified intervals.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Minimum api_request_creation_datetime of the API request",
            "in": "query",
            "name": "min_api_request_creation_datetime",
            "required": true,
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Maximum api_request_creation_datetime of the API request",
            "in": "query",
            "name": "max_api_request_creation_datetime",
            "required": true,
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "The interval for summarizing analytics. Must be in the format <integer> <unit> where <unit> is one of minute, hour, day. Accepted granulaity is per minute up to one hour, per ten minutes up to 72 hours, per hour up to one week and per day up to one year.",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the API request",
            "in": "query",
            "name": "api_request_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "HTTP method of the API request",
            "in": "query",
            "name": "api_request_method",
            "schema": { "type": "string" }
          },
          {
            "description": "Path of the API request",
            "in": "query",
            "name": "api_request_path",
            "schema": { "type": "string" }
          },
          {
            "description": "Client IP address of the API request",
            "in": "query",
            "name": "api_request_client_ip_address",
            "schema": { "type": "string" }
          },
          {
            "description": "Client user agent of the API request",
            "in": "query",
            "name": "api_request_client_user_agent",
            "schema": { "type": "string" }
          },
          {
            "description": "HTTP status code of the API request",
            "in": "query",
            "name": "api_request_status_code",
            "schema": { "type": "integer" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "The count of intervals analyzed.",
                      "type": "integer"
                    },
                    "data": {
                      "properties": {
                        "intervals": {
                          "description": "Detailed breakdown of requests, errors, and successful responses for each interval.",
                          "items": {
                            "properties": {
                              "error": { "type": "integer" },
                              "interval": { "type": "string" },
                              "requests": { "type": "integer" },
                              "successful": { "type": "integer" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total_error": {
                          "description": "The total number of error responses in the given period.",
                          "type": "integer"
                        },
                        "total_requests": {
                          "description": "The total number of API requests in the given period.",
                          "type": "integer"
                        },
                        "total_successful": {
                          "description": "The total number of successful responses in the given period.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message.",
                      "example": "API Request analysis successful.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "API Request analysis successful."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "API Request Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "API Request Analytics",
        "tags": ["API Request"]
      }
    },
    "/private/user/api_request/retrieve/{api_request_id}": {
      "get": {
        "description": "Retrieves a specific API Request based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the API Request to retrieve",
            "in": "path",
            "name": "api_request_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiRequestSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful API Request Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "API Request Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve API Request",
        "tags": ["API Request"]
      }
    },
    "/private/user/api_request/search": {
      "get": {
        "description": "Search API Requests on the user account using various filters. Operations including max_, min_, like_, and sorting are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the API request",
            "in": "query",
            "name": "api_request_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "HTTP method of the API request",
            "in": "query",
            "name": "api_request_method",
            "schema": { "type": "string" }
          },
          {
            "description": "Path of the API request",
            "in": "query",
            "name": "api_request_path",
            "schema": { "type": "string" }
          },
          {
            "description": "Client IP address of the API request",
            "in": "query",
            "name": "api_request_client_ip_address",
            "schema": { "type": "string" }
          },
          {
            "description": "Client user agent of the API request",
            "in": "query",
            "name": "api_request_client_user_agent",
            "schema": { "type": "string" }
          },
          {
            "description": "HTTP status code of the API request",
            "in": "query",
            "name": "api_request_status_code",
            "schema": { "type": "integer" }
          },
          {
            "description": "Minimum api_request_creation_datetime of the API request",
            "in": "query",
            "name": "min_api_request_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Maximum api_request_creation_datetime of the API request",
            "in": "query",
            "name": "max_api_request_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiRequestSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful API Request search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search API Requests",
        "tags": ["API Request"]
      }
    },
    "/private/user/city/retrieve/{city_id}": {
      "get": {
        "description": "Retrieves a specific City.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the City to retrieve",
            "in": "path",
            "name": "city_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CitySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful City Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "City Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve City",
        "tags": ["City"]
      }
    },
    "/private/user/city/search": {
      "get": {
        "description": "Search City entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the City",
            "in": "query",
            "name": "city_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Name of the City",
            "in": "query",
            "name": "city_name",
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the Subdivision which the City is in",
            "in": "query",
            "name": "subdivision_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Timezone of the City",
            "in": "query",
            "name": "city_timezone",
            "schema": { "type": "string" }
          },
          {
            "description": "Whether the City one of the ten largest cities in its timezone with atleast 300,000 population",
            "in": "query",
            "name": "city_is_popular",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Indentifier of the city when used in backconnect proxy",
            "in": "query",
            "name": "city_alias",
            "schema": { "type": "string" }
          },
          {
            "description": "Example postcode of the City",
            "in": "query",
            "name": "city_example_postcode",
            "schema": { "type": "string" }
          },
          {
            "description": "Latitude of the City",
            "in": "query",
            "name": "city_latitude",
            "schema": { "type": "string" }
          },
          {
            "description": "Longitude of the City",
            "in": "query",
            "name": "city_longitude",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CitySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful City search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search City",
        "tags": ["City"]
      }
    },
    "/private/user/continent/retrieve/{continent_id}": {
      "get": {
        "description": "Retrieves a specific Continent.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Continent to retrieve",
            "in": "path",
            "name": "continent_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ContinentSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Continent Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Continent Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Continent",
        "tags": ["Continent"]
      }
    },
    "/private/user/continent/search": {
      "get": {
        "description": "Search Continent entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Unique two-letter identifier of the Continent",
            "in": "query",
            "name": "continent_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Name of the Continent",
            "in": "query",
            "name": "continent_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Alias or alternative name for the Continent",
            "in": "query",
            "name": "continent_alias",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ContinentSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Continent search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Continent",
        "tags": ["Continent"]
      }
    },
    "/private/user/country/retrieve/{country_id}": {
      "get": {
        "description": "Retrieves a specific Country.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Country to retrieve",
            "in": "path",
            "name": "country_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CountrySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Country Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Country Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Country",
        "tags": ["Country"]
      }
    },
    "/private/user/country/search": {
      "get": {
        "description": "Search Country entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Unique two-letter identifier of the Country",
            "in": "query",
            "name": "country_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Name of the Country",
            "in": "query",
            "name": "country_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Identifier of the Continent where the Country is located",
            "in": "query",
            "name": "continent_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Boolean flag indicating if the Country is a member of the European Union",
            "in": "query",
            "name": "country_is_european_union",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Alias or alternative name for the Country",
            "in": "query",
            "name": "country_alias",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CountrySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Country search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Country",
        "tags": ["Country"]
      }
    },
    "/private/user/documentation/product-api_openapi.json": {
      "get": {
        "operationId": "openapi_private_user_documentation_product_api_openapi_json_get",
        "parameters": [{ "in": "query", "name": "use_cache", "schema": {} }],
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" },
          "422": { "content": {}, "description": "Validation Error" }
        },
        "security": [{ "HTTPBasic": [] }],
        "summary": "Openapi",
        "tags": ["Private", "Private"]
      }
    },
    "/private/user/notification/read": {
      "post": {
        "description": "Allows a user to mark one or multiple notifications as \"read\". This function will update the 'notification_read_datetime' field of the notification(s) with the current timestamp, indicating that the user has seen and acknowledged the notification(s).\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of notification IDs that were successfully edited.",
                      "example": [123],
                      "items": {
                        "description": "The Notification ID.",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating that the notifications were marked as read.",
                      "example": "Notifications successfully updated to read.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully marked notifications as read."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Mark Notification as Read",
        "tags": ["Notification"]
      }
    },
    "/private/user/notification/retrieve/{notification_id}": {
      "get": {
        "description": "Retrieves a specific Notification based on the provided ID for the current user's account. Additional related objects to the notification can be fetched and added to the result if necessary.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Notification to retrieve",
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotificationSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Notification Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Notification Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Notification",
        "tags": ["Notification"]
      }
    },
    "/private/user/notification/search": {
      "get": {
        "description": "Search Notifications on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the notification",
            "in": "query",
            "name": "notification_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Title of the notification",
            "in": "query",
            "name": "notification_title",
            "schema": { "type": "string" }
          },
          {
            "description": "Content of the notification",
            "in": "query",
            "name": "notification_content",
            "schema": { "type": "string" }
          },
          {
            "description": "Preview text of the notification",
            "in": "query",
            "name": "notification_preview",
            "schema": { "type": "string" }
          },
          {
            "description": "Type of the notification",
            "in": "query",
            "name": "notification_type",
            "schema": {
              "enum": ["promotion", "service", "account", "network", "other"],
              "type": "string"
            }
          },
          {
            "description": "Icon related to the notification",
            "in": "query",
            "name": "notification_icon",
            "schema": { "type": "string" }
          },
          {
            "description": "Link URL associated with the notification",
            "in": "query",
            "name": "notification_link",
            "schema": { "type": "string" }
          },
          {
            "description": "Scope of the notification",
            "in": "query",
            "name": "notification_scope",
            "schema": { "enum": ["user", "global"], "type": "string" }
          },
          {
            "description": "If the notification is sent via email",
            "in": "query",
            "name": "notification_is_email",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Datetime the notification was read",
            "in": "query",
            "name": "notification_read_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the notification was created",
            "in": "query",
            "name": "notification_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the notification was last updated",
            "in": "query",
            "name": "notification_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotificationSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Notification search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Notifications",
        "tags": ["Notification"]
      }
    },
    "/private/user/subdivision/retrieve/{subdivision_id}": {
      "get": {
        "description": "Retrieves a specific Subdivision.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Subdivision to retrieve",
            "in": "path",
            "name": "subdivision_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubdivisionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Subdivision Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Subdivision Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Subdivision",
        "tags": ["Subdivision"]
      }
    },
    "/private/user/subdivision/search": {
      "get": {
        "description": "Search Subdivision entries using various filters. This endpoint allows users to query subdivisions based on specific attributes.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Unique identifier of the Subdivision",
            "in": "query",
            "name": "subdivision_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Name of the Subdivision",
            "in": "query",
            "name": "subdivision_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Country identifier to which the Subdivision belongs",
            "in": "query",
            "name": "country_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Alias or alternative name for the Subdivision",
            "in": "query",
            "name": "subdivision_alias",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubdivisionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Subdivision search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Subdivision",
        "tags": ["Subdivision"]
      }
    },
    "/private/user/template/llm_generate": {
      "post": {
        "operationId": "llm_generate_private_user_template_llm_generate_post",
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" },
          "422": { "content": {}, "description": "Validation Error" }
        },
        "summary": "Llm Generate",
        "tags": ["Private", "User", "Template"]
      }
    },
    "/private/user/token_catalogue_item/retrieve/{token_catalogue_item_id}": {
      "get": {
        "description": "Retrieves a specific Token Catalogue Item based on the provided ID.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Token Catalogue Item to retrieve",
            "in": "path",
            "name": "Token Catalogue Item_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenCatalogueItemSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Token Catalogue Item"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Token Catalogue Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Token Catalogue Item",
        "tags": ["Token Catalogue Item"]
      }
    },
    "/private/user/token_catalogue_item/search": {
      "get": {
        "description": "Search Token Catalogue Item on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Token Catalogue Item to search",
            "in": "query",
            "name": "token_catalogue_item_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Cost of the Token Catalogue Item",
            "in": "query",
            "name": "token_catalogue_item_cost",
            "schema": { "type": "integer" }
          },
          {
            "description": "Datetime the token catalogue item was created",
            "in": "query",
            "name": "token_catalogue_item_created_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the token catalogue item was last updated",
            "in": "query",
            "name": "token_catalogue_item_last_updated_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenCatalogueItemSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Token Catalogue Item Search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Token Catalogue Item",
        "tags": ["Token Catalogue Item"]
      }
    },
    "/private/user/user/edit": {
      "patch": {
        "description": "Allows authenticated users to edit their user details. Changes to email address, password, or enabling email two-factor authentication require an additional two-factor authentication step. Ensure that the appropriate fields are provided in the request body.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "country_id": {
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
                    "type": "string"
                  },
                  "two_factor_authentication_private_key": {
                    "description": "Required if prompted by the API. Private 2FA key provided by the user and sent to them via email or SMS. [Conditional]",
                    "type": "string"
                  },
                  "two_factor_authentication_public_key": {
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]",
                    "type": "string"
                  },
                  "user_email_address": {
                    "description": "New email address of the user. Changing this requires two-factor authentication.",
                    "type": "string"
                  },
                  "user_email_two_factor_authentication": {
                    "description": "Enable or disable email-based two-factor authentication. Altering this requires two-factor authentication.",
                    "type": "boolean"
                  },
                  "user_first_name": {
                    "description": "First name of the user.",
                    "type": "string"
                  },
                  "user_iso_language_code": {
                    "description": "ISO Language Code [(ISO 639-1)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
                    "type": "string"
                  },
                  "user_last_name": {
                    "description": "Last name of the user.",
                    "type": "string"
                  },
                  "user_password": {
                    "description": "New password of the user. Changing this requires two-factor authentication.",
                    "type": "string"
                  },
                  "user_phone_number": {
                    "description": "user phone number.",
                    "type": "string"
                  },
                  "user_profile_image_url": {
                    "description": "URL of the user profile image.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The user details to be edited.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of User IDs that were successfully edited.",
                      "example": [132452],
                      "items": {
                        "description": "The User ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the user details were edited.",
                      "example": "User successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User Successfully Edited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "User Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit User Details",
        "tags": ["User"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/user/login": {
      "post": {
        "description": "Allows users to login using their email address and password. If the account has two-factor authentication enabled, a 499 response will be returned indicating that two-factor authentication is required. Ensure that the required fields are provided in the request body.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "two_factor_authentication_private_key": {
                    "description": "Required if prompted by the API. Private 2FA key provided by the user and sent to them via email or SMS. [Conditional]",
                    "type": "string"
                  },
                  "two_factor_authentication_public_key": {
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]",
                    "type": "string"
                  },
                  "user_email_address": {
                    "description": "Email address of the user.",
                    "type": "string"
                  },
                  "user_password": {
                    "description": "Password of the user.",
                    "type": "string"
                  }
                },
                "required": ["user_email_address", "user_password"],
                "type": "object"
              }
            }
          },
          "description": "The user login credentials.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaxmenouifweobiefKKOosdmLWIxMb3hpZXMuY29tIiwiY3VzdG9tZXJfc2Vzc2lvbl9rZXkiOiJGM2lCMjZXT0VkVnRNcVpMczNoWEN4YjZlMGROSnIwS0V0Qm5SWllJV0JndWNMZ2xWVWw3RE9QU1JRcVNSZDRJODZ5bUpjODNCdnRxTHc4QW5PZzVXRUxQeEFhc09UaTRlV1dIIiwiY3VzdG9tZXJfaXNfYWRtaW4iOnRydWUsImN1c3RvbWVyX2FkbWluX3R5cGUiOiJBTEwiLCJzZXNzaW9uX2NyZWF0aW9uX3RpbWUiOiJUaHUsIDE0IFNlcCAyMDIzIDEzOjI5OjExIEdNVCIsInNlc3Npb25faXBfYWRkcmVzcyI6Ijc4LjMzLjI0LjE3OCJ9LCJuYmYiOjE2OTQ2OTgxNTEsImV4cCI6MTcyNjIzNDE1MX0.QXSwIEHsKezg-S5YwyNqufzK3amXU0So1mFVUbROPAg"
                  },
                  "message": "Login successful."
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "access_token": {
                          "description": "JWT access token for authenticated sessions.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message indicating the login was successful.",
                      "example": "Login successful.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Login Successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized access. Possible reasons include incorrect credentials or no account exists."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ForbiddenResponse" }
                  ]
                }
              }
            },
            "description": "Forbidden - User is suspended"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          { "ApplicationAPIPrivateKey": [], "ApplicationAPIPublicKey": [] }
        ],
        "summary": "User Login",
        "tags": ["User", "Authorization"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/user/logout": {
      "post": {
        "description": "Logs out the authenticated user from the current session. This won't affect other devices or sessions. The JWT cookies associated with the session are unset, ensuring that the user is logged out from the current device or session.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "message": "Logout successful." },
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Success message indicating the logout was successful for the current session.",
                      "example": "Logout successful.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Logout Successful"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized access. Please login to access this route."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "User Logout",
        "tags": ["User"]
      }
    },
    "/private/user/user/logout_all_devices": {
      "post": {
        "description": "Logs out the authenticated user from all devices by regenerating the session key. This ensures the user is logged out everywhere.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "User successfully logged out of all devices."
                },
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Success message indicating the logout was successful from all devices.",
                      "example": "User successfully logged out of all devices.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Logout Successful"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized access. Please login to access this route."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "User Clear All Sessions",
        "tags": ["User"]
      }
    },
    "/private/user/user/oauth": {
      "get": {
        "description": "This endpoint retrieves the OAuth authorization URL based on the external service (e.g., Google) and the specified authorization type (login, connect, signup). Instead of directly redirecting, it returns the URL so that the client application can handle the redirection as needed.\n",
        "parameters": [
          {
            "description": "The name of the external OAuth service.",
            "in": "query",
            "name": "external_service",
            "required": true,
            "schema": { "enum": ["google"], "type": "string" }
          },
          {
            "description": "Type of OAuth action",
            "in": "query",
            "name": "authorization_type",
            "required": true,
            "schema": {
              "enum": ["login", "connect", "signup"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "OAuth redirect link successfully generated",
                  "redirect_url": "https://accounts.google.com/o/oauth2/auth?client_id=XYZ"
                },
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Success message.",
                      "type": "string"
                    },
                    "redirect_url": {
                      "description": "The OAuth authorization URL.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Invalid parameters or unsupported external service/authorization type."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "OAuth Authorization URL Retrieval",
        "tags": ["User"]
      }
    },
    "/private/user/user/oauth_reset": {
      "post": {
        "description": "This endpoint allows the disconnection of a linked Google OAuth account from the user Bloxed account. After invoking this function, the user linked Google OAuth id will be set to None in the database. Important API logging events are generated, and a notification is created for the user.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "external_service": {
                    "description": "The name of the external OAuth service",
                    "enum": ["google"],
                    "type": "string"
                  }
                },
                "required": ["external_service"],
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Successfully unlinked Google account."
                },
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Success message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized access due to incorrect credentials or no account exists."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "User OAuth Reset",
        "tags": ["User"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/user/password_reset": {
      "post": {
        "description": "Allows users to reset their password using their email address. The endpoint checks for potential brute-force attacks and two-factor authentication (if enabled). After successful password reset, the user is logged in and a notification is generated. Ensure that the required fields are provided in the request body.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "two_factor_authentication_private_key": {
                    "description": "Required if prompted by the API. Private 2FA key provided by the user and sent to them via email or SMS.",
                    "type": "string"
                  },
                  "two_factor_authentication_public_key": {
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API.",
                    "type": "string"
                  },
                  "user_email_address": {
                    "description": "Email address of the user.",
                    "type": "string"
                  },
                  "user_password": {
                    "description": "New password of the user.",
                    "type": "string"
                  }
                },
                "required": ["user_email_address", "user_password"],
                "type": "object"
              }
            }
          },
          "description": "The user password reset credentials.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": { "access_token": "eyJhbGciOiJIUz..........UbROPAg" },
                  "message": "Password reset successful. You are now logged in."
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "access_token": {
                          "description": "JWT access token for authenticated sessions.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message indicating the password reset and login were successful.",
                      "example": "Password reset successful. You are now logged in.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Password Reset Successful & User Logged In"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized access due to incorrect credentials or no account exists."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenResponse" }
              }
            },
            "description": "Forbidden - User is suspended or repeated failed attempts detected."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "User Password Reset",
        "tags": ["User"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/user/retrieve": {
      "get": {
        "description": "Retrieves the profile of the currently authenticated user, along with their credit balance.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UserSuccessfulRetrieveResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "organizations": {
                              "description": "List of organizations the user is the owner of.",
                              "example": [
                                "00000000-0000-0000-0000-000000000000"
                              ],
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful User Profile Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "User Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Current User",
        "tags": ["User"]
      }
    },
    "/private/user/user/security_lock/{user_id}": {
      "post": {
        "description": "Security lock user with security key and user_id.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the user to security lock",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_security_key": {
                    "description": "Security key of the user",
                    "type": "string"
                  }
                },
                "required": ["user_security_key"],
                "type": "object"
              }
            }
          },
          "description": "Security Key Information",
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "User successfully security locked"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "User Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Security Lock Current User",
        "tags": ["User"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/user/signup": {
      "post": {
        "description": "Register a new user account using their first name, last name, email address, and password. Additionally, allows for optional parameters such as phone number, profile image URL, two-factor authentication settings, country code, and language code. After registration, a two-factor authentication step is checked and an email notification is sent to the newly registered user.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "country_id": {
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
                    "type": "string"
                  },
                  "country_id_billing": {
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
                    "type": "string"
                  },
                  "two_factor_authentication_private_key": {
                    "description": "Required if prompted by the API. Private 2FA key provided by the user and sent to them via email or SMS. [Conditional]",
                    "type": "string"
                  },
                  "two_factor_authentication_public_key": {
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]",
                    "type": "string"
                  },
                  "user_billing_line_one": {
                    "description": "First line of the user billing address.",
                    "type": "string"
                  },
                  "user_billing_line_two": {
                    "description": "Second line of the user billing address (optional).",
                    "type": "string"
                  },
                  "user_billing_name": {
                    "description": "Full name for billing purposes.",
                    "type": "string"
                  },
                  "user_billing_subdivision_name": {
                    "description": "State, province, or other subdivision name of the user billing address.",
                    "type": "string"
                  },
                  "user_billing_zip_code": {
                    "description": "Postal or ZIP code of the user billing address.",
                    "type": "string"
                  },
                  "user_email_address": {
                    "description": "Email address of the user.",
                    "type": "string"
                  },
                  "user_email_two_factor_authentication": {
                    "description": "Flag indicating if email two-factor authentication is enabled.",
                    "type": "boolean"
                  },
                  "user_first_name": {
                    "description": "First name of the user.",
                    "type": "string"
                  },
                  "user_iso_language_code": {
                    "description": "ISO Language Code [(ISO 639-1)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)",
                    "type": "string"
                  },
                  "user_last_name": {
                    "description": "Last name of the user.",
                    "type": "string"
                  },
                  "user_password": {
                    "description": "Password of the user.",
                    "type": "string"
                  },
                  "user_phone_number": {
                    "description": "Phone number of the user.",
                    "type": "string"
                  },
                  "user_profile_image_url": {
                    "description": "Profile image URL of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "user_email_address",
                  "user_first_name",
                  "user_last_name",
                  "user_password"
                ],
                "type": "object"
              }
            }
          },
          "description": "The user registration details.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "access_token": {
                          "description": "JWT access token for authenticated sessions.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message indicating the registration and login were successful.",
                      "example": "Registration successful. You are now logged in.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Registration Successful & User Logged In"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConflictResponse" }
              }
            },
            "description": "Conflict - Conflict With Existing User"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "User Signup",
        "tags": ["User"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/utilities/geocode": {
      "post": {
        "description": "This endpoint takes various components of an address, such as address lines, subdivision name, ISO country code, and zip code, then returns a geocoded address. The geocoded address includes formatted components and the full address in a structured format. The address_line_two field is\n",
        "parameters": [
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address_line_one": {
                    "description": "The first line of the address, typically containing the street and number.",
                    "type": "string"
                  },
                  "address_line_two": {
                    "description": "The second line of the address, if applicable.",
                    "type": "string"
                  },
                  "country_id": {
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes).",
                    "type": "string"
                  },
                  "subdivision_name": {
                    "description": "ISO Country Code [(ISO 3166-2)](https://unece.org/trade/cefact/unlocode-code-list-country-and-territory).",
                    "type": "string"
                  },
                  "zip_code": {
                    "description": "The postal or zip code for the address.",
                    "type": "string"
                  }
                },
                "required": [
                  "address_line_one",
                  "country_id",
                  "subdivision_name",
                  "zip_code"
                ],
                "type": "object"
              }
            }
          },
          "description": "The components of the address to be geocoded.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "address_line_one": {
                          "description": "The first line of the geocoded address.",
                          "type": "string"
                        },
                        "address_line_two": {
                          "description": "The second line of the geocoded address, if applicable.",
                          "type": "string"
                        },
                        "country_id": {
                          "description": "The ISO country code of the geocoded address.",
                          "type": "string"
                        },
                        "formatted_address": {
                          "description": "The full, formatted address.",
                          "type": "string"
                        },
                        "subdivision_name": {
                          "description": "The subdivision name of the geocoded address (e.g., city or locality).",
                          "type": "string"
                        },
                        "zip_code": {
                          "description": "The postal or zip code of the geocoded address.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully geocoded the address and returned the formatted data."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad request. One or more parameters were missing or invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Geocode Address",
        "tags": ["Utilities"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/balance_transaction/retrieve/{balance_transaction_id}": {
      "get": {
        "description": "Retrieves a specific Balance Transaction based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization to retrieve the Balance Transaction from",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Balance Transaction to retrieve",
            "in": "path",
            "name": "balance_transaction_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BalanceTransactionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Balance Transaction Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Balance Transaction Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Balance Transaction",
        "tags": ["Balance Transaction"]
      }
    },
    "/private/user/{organization_id}/balance_transaction/search": {
      "get": {
        "description": "Search Balance Transactions on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization to retrieve the Balance Transaction from",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Balance Transaction",
            "in": "query",
            "name": "balance_transaction_id",
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the associated Invoice",
            "in": "query",
            "name": "invoice_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Reason for the Balance Transaction",
            "in": "query",
            "name": "balance_transaction_reason",
            "schema": {
              "enum": [
                "top_up",
                "adjustment",
                "applied_to_invoice",
                "credit_note invoice_too_small",
                "invoice_too_large",
                "unapplied_from_invoice",
                "unspent_receiver_credit"
              ],
              "type": "string"
            }
          },
          {
            "description": "Amount of the Balance Transaction",
            "in": "query",
            "name": "balance_transaction_amount",
            "schema": { "type": "integer" }
          },
          {
            "description": "Indicates if the Balance Transaction is out of band",
            "in": "query",
            "name": "balance_transaction_is_out_of_band",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Datetime the Balance Transaction was created",
            "in": "query",
            "name": "balance_transaction_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Balance Transaction was last updated",
            "in": "query",
            "name": "balance_transaction_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BalanceTransactionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Balance Transaction search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Balance Transactions",
        "tags": ["Balance Transaction"]
      }
    },
    "/private/user/{organization_id}/cart/calculate": {
      "post": {
        "description": "This endpoint takes the provided cart items and an optional promotional code, then calculates the total cost. It handles the application of any discounts from promotions, calculates the total considering the user's credit balance, and returns a detailed summary of the pricing. The user authentication is optional; if the user is authenticated, the credit balance from their account will be considered in the calculation.\n",
        "parameters": [
          {
            "description": "ID of the Organization to calculate the cart for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_top_up": {
                    "description": "Indicates whether the cart is a top-up cart. If true, the top_up_amount parameter must be provided. Other parameters are restricted if declared, for example, line_items and promotional_code.\n",
                    "type": "boolean"
                  },
                  "line_items": {
                    "description": "List of items in the cart, where each item is represented as a dictionary containing 'item_price_id' and 'item_quantity'. This parameter is required for the calculation.\n",
                    "items": {
                      "properties": {
                        "item_price_id": {
                          "description": "ID of the price associated with the product.",
                          "type": "string"
                        },
                        "item_quantity": {
                          "description": "Quantity of the product to be purchased.",
                          "type": "integer"
                        }
                      },
                      "required": ["item_price_id", "item_quantity"],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "promotional_code": {
                    "description": "Promotional code to apply to the cart. This parameter can not be used if is_top_up is true.",
                    "type": "string"
                  },
                  "top_up_amount": {
                    "description": "The amount to top up the user's credit balance by. This parameter is required if is_top_up is true.\n",
                    "type": "integer"
                  },
                  "validate_payment_platform": {
                    "description": "If the list of available checkout payment platforms is validated against this specific cart and user. This should be used at the final stage of checkout as it increases response times.\n",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The cart items and optional promotional code for which to calculate the total cost.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "allowed_coinpayments_currencies": {
                          "description": "List of allowed currencies for coin payments.",
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "allowed_payment_platforms": {
                          "description": "List of allowed payment platforms like Stripe, Bitpay.",
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "allowed_saved_payment_methods": {
                          "description": "List of allowed saved payment methods with details.",
                          "items": {
                            "properties": {
                              "payment_method_expiry_month": {
                                "type": "integer"
                              },
                              "payment_method_expiry_year": {
                                "type": "integer"
                              },
                              "payment_method_id": { "type": "string" },
                              "payment_method_last_four": { "type": "string" },
                              "payment_method_network": { "type": "string" },
                              "payment_method_platform": { "type": "string" },
                              "payment_method_type": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "before_discount_total": {
                          "description": "Total cost before any discounts.",
                          "type": "integer"
                        },
                        "credit_balance": {
                          "description": "User's current credit balance.",
                          "type": "integer"
                        },
                        "credit_only_checkout": {
                          "description": "Indicates if the checkout is credit only.",
                          "type": "boolean"
                        },
                        "disallowed_coinpayments_currencies": {
                          "description": "List of disallowed currencies with reasons.",
                          "items": {
                            "properties": {
                              "currency": { "type": "string" },
                              "disallow_reason": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "disallowed_payment_platforms": {
                          "description": "List of disallowed payment platforms with reasons.",
                          "items": {
                            "properties": {
                              "disallow_reason": { "type": "string" },
                              "payment_platform": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "discount": {
                          "description": "Discount amount applied.",
                          "type": "integer"
                        },
                        "discounted": {
                          "description": "Indicates if a discount was applied.",
                          "type": "boolean"
                        },
                        "invalid_reason": {
                          "description": "The reason for the cart being invalid. Only set if is_valid is false.",
                          "type": "string"
                        },
                        "is_top_up": {
                          "description": "Indicates if the cart is for a top-up.",
                          "type": "boolean"
                        },
                        "is_valid": {
                          "description": "Indicates if the cart is valid to checkout. This is used when the contents of the cart is logically correct but the cart is not valid for checkout, for example, if the cart is under the minimum store order value.",
                          "type": "boolean"
                        },
                        "line_items": {
                          "description": "Detailed list of cart items.",
                          "items": {
                            "properties": {
                              "item_country_id": {
                                "description": "Country code associated with the item.",
                                "type": "string"
                              },
                              "item_name": {
                                "description": "Name of the item.",
                                "type": "string"
                              },
                              "item_per_unit_amount": {
                                "description": "Cost per unit of the item.",
                                "type": "integer"
                              },
                              "item_price_id": {
                                "description": "Unique identifier for the item's price.",
                                "type": "string"
                              },
                              "item_price_type": {
                                "description": "Type of price (one-time/recurring).",
                                "type": "string"
                              },
                              "item_quantity": {
                                "description": "Quantity of the item in the cart.",
                                "type": "integer"
                              },
                              "item_total": {
                                "description": "Total cost for the item.",
                                "type": "integer"
                              },
                              "item_type": {
                                "description": "Type or category of the item.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "promotional_code": {
                          "description": "Promotional code applied, if any.",
                          "type": "string"
                        },
                        "promotional_code_id": {
                          "description": "ID of the applied promotional code, if any.",
                          "type": "string"
                        },
                        "total": {
                          "description": "Total cost after discounts, before credit.",
                          "type": "integer"
                        },
                        "total_after_applied_credit": {
                          "description": "Total cost after discounts and credit.",
                          "type": "integer"
                        },
                        "user_credit_balance_applied": {
                          "description": "Indicates if the user's credit balance was used.",
                          "type": "boolean"
                        },
                        "user_credit_balance_applied_amount": {
                          "description": "Amount of credit balance applied.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully verified the cart and calculated the pricing."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad request. One or more parameters were missing or invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - price_id not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity. The provided data is not valid for creating a checkout."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Calculate / Validate Cart",
        "tags": ["Cart"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/checkout/create": {
      "post": {
        "description": "This endpoint creates a checkout for the authenticated user based on the provided data. It supports different payment platforms, promotional codes, and can handle both one-time and recurring payments.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization to create the Checkout for",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "coinpayments_currency": {
                    "default": "btc",
                    "description": "Cryptocurrency to use for the checkout. Only applicable for if payment_platform=coinpayments.",
                    "enum": [
                      "xmr",
                      "usdt.erc20",
                      "usdc",
                      "ltc",
                      "bnb",
                      "eth",
                      "btc"
                    ],
                    "type": "string"
                  },
                  "is_top_up": {
                    "default": false,
                    "description": "Indicates whether the checkout is for topping up the user credit balance.",
                    "type": "boolean"
                  },
                  "line_items": {
                    "description": "List of items for the checkout, where each item is represented as a dictionary containing 'item_price_id' and 'item_quantity'. Required for if is_top_up=False.\n",
                    "items": {
                      "properties": {
                        "item_price_id": {
                          "description": "ID of the price associated with the product.",
                          "type": "string"
                        },
                        "item_quantity": {
                          "description": "Quantity of the product to be purchased.",
                          "type": "integer"
                        }
                      },
                      "required": ["item_price_id", "item_quantity"],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "payment_method_id": {
                    "description": "ID of a saved payment method to use for the payment. Usually, used for a saved Stripe card. When using, payment_platform must match the saved payment methods platform.",
                    "type": "string"
                  },
                  "payment_platform": {
                    "description": "The payment platform to use for the checkout.",
                    "enum": ["stripe", "bitpay", "coinpayments"],
                    "type": "string"
                  },
                  "promotional_code": {
                    "description": "Promotional code to apply to the checkout.",
                    "type": "string"
                  },
                  "top_up_amount": {
                    "description": "Intger amount to top up in cent if is_top_up is set to true. Must be between $5-10,000 (500-1000000 cents).",
                    "type": "number"
                  }
                },
                "required": ["payment_platform"],
                "type": "object"
              }
            }
          },
          "description": "The data needed to create the checkout.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "external_payment_id": {
                          "description": "ID of the payment in the external system, if applicable.",
                          "type": "string"
                        },
                        "invoice_is_paid": {
                          "description": "Indicates whether the invoice is already paid. Use this to decide whether to redirect the user to the payment URL or not.",
                          "type": "boolean"
                        },
                        "redirect_url": {
                          "description": "URL where the user should be redirected to complete the payment.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Checkout was successfully created."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad request. One or more parameters were missing or invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - price_id not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity. The provided data is not valid for creating a checkout."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create Checkout",
        "tags": ["Checkout"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/device_fingerprint/create": {
      "post": {
        "description": "Allows a user to create a new device fingerprint for their organization. The system limits the number of active fingerprints per organization. If the maximum number is reached, the user must remove an existing fingerprint before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "device_fingerprint_browser": {
                    "description": "Browser for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "device_fingerprint_description": {
                    "description": "Description for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "device_fingerprint_device": {
                    "description": "Device for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "device_fingerprint_locale": {
                    "description": "Locale for the fingerprint.",
                    "maxLength": 5,
                    "type": "string"
                  },
                  "device_fingerprint_name": {
                    "description": "Name for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "device_fingerprint_operating_system": {
                    "description": "Operating System for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "device_fingerprint_user_agent": {
                    "description": "User Agent for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The fingerprint creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "Device fingerprint successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created fingerprint.",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fingerprint Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max fingerprints Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create Device fingerprint",
        "tags": ["Device Fingerprint"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/device_fingerprint/delete/{device_fingerprint_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Device Fingerprint associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Fingerprint to delete.",
            "in": "path",
            "name": "fingerprint_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceFingerprintSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Fingerprint Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Device Fingerprint with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Device Fingerprint",
        "tags": ["Device Fingerprint"]
      }
    },
    "/private/user/{organization_id}/device_fingerprint/retrieve/{device_fingerprint_id}": {
      "get": {
        "description": "Retrieves a specific Device Fingerprint based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Device Fingerprint to retrieve",
            "in": "path",
            "name": "device_fingerprint_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DeviceFingerprintSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Fingerprint Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Fingerprint Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Device Fingerprint",
        "tags": ["Device Fingerprint"]
      }
    },
    "/private/user/{organization_id}/device_fingerprint/search": {
      "get": {
        "description": "Search Device Fingerprint on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Device Fingerprint",
            "in": "query",
            "name": "device_fingerprint_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "ID of the Organization",
            "in": "query",
            "name": "organization_id",
            "schema": {}
          },
          {
            "description": "Name of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Description of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_description",
            "schema": { "type": "string" }
          },
          {
            "description": "Device of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_device",
            "schema": { "type": "string" }
          },
          {
            "description": "Browser of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_browser",
            "schema": { "type": "string" }
          },
          {
            "description": "Operating System of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_operating_system",
            "schema": { "type": "string" }
          },
          {
            "description": "User Agent of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_user_agent",
            "schema": { "type": "string" }
          },
          {
            "description": "Locale of the fingerprint",
            "in": "query",
            "name": "device_fingerprint_locale",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Fingerprint was created",
            "in": "query",
            "name": "device_fingerprint_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Fingerprint was last updated",
            "in": "query",
            "name": "device_fingerprint_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DeviceFingerprintSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Fingerprint search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Device Fingerprint",
        "tags": ["Device Fingerprint"]
      }
    },
    "/private/user/{organization_id}/egress_configuration/create": {
      "post": {
        "description": "Allows a user to create a new egress configuration for their organization. The system limits the number of active egresss per organization. If the maximum number is reached, the user must remove an existing egress before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to create the egress for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "egress_configuration_description": {
                    "description": "Description for the egress.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "egress_configuration_name": {
                    "description": "Name for the egress.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "egress_module_id": {
                    "description": "ID of the egress module.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The egress creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "egress successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created egress.",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "egress Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max egresss Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create egress",
        "tags": ["Egress Configuration"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/egress_configuration/delete/{egress_configuration_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Egress configuration associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to create the egress for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Egress to delete.",
            "in": "path",
            "name": "egress_configuration_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EgressConfigurationSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Egress configuration Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Egress with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Egress",
        "tags": ["Egress Configuration"]
      }
    },
    "/private/user/{organization_id}/egress_configuration/edit/{egress_configuration_id}": {
      "patch": {
        "description": "Edit Egress Configuration details. Only the owner of the organization can edit an Egress Configuration.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve egress configuration for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the cgress configuration to retrieve",
            "in": "path",
            "name": "egress_configuration_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "egress_configuration_status": {
                    "description": "The status of the egress configuration",
                    "example": "completed",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The egress configuration details to be edited.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of egress configuration IDs that were successfully edited.",
                      "example": ["123e4567-e89b-12d3-a456-426614174000"],
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the egress configuration details were edited.",
                      "example": "egress configuration successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Egress configuration Successfully Edited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Egress configuration Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit egress configuration",
        "tags": ["Egress Configuration"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/egress_configuration/retrieve/{egress_configuration_id}": {
      "get": {
        "description": "Retrieves a specific Egress configuration based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to create the egress for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Egress to retrieve",
            "in": "path",
            "name": "egress_configuration_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EgressConfigurationSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Egress Config Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Egress Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Egress",
        "tags": ["Egress Configuration"]
      }
    },
    "/private/user/{organization_id}/egress_configuration/search": {
      "get": {
        "description": "Search Egress on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Egress configuration",
            "in": "query",
            "name": "egress_configuration_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "ID of the Organization",
            "in": "query",
            "name": "organization_id",
            "schema": {}
          },
          {
            "description": "Name of the egress",
            "in": "query",
            "name": "egress_configuration_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Description of the egress",
            "in": "query",
            "name": "egress_configuration_description",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Egress was created",
            "in": "query",
            "name": "egress_configuration_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Egress was last updated",
            "in": "query",
            "name": "egress_configuration_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EgressConfigurationSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Egress configuration search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Egress",
        "tags": ["Egress Configuration"]
      }
    },
    "/private/user/{organization_id}/egress_module/create": {
      "post": {
        "description": "Allows a user to create a new egress_module for their organization. The system limits the number of active egress modules per organization. If the maximum number is reached, the user must remove an existing egress module before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "egress_module_description": {
                    "description": "Description for the egress module.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "egress_module_name": {
                    "description": "Name for the egress module.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The egress creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "egress module successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created egress.",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "egress module Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max egresss Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create an egress module",
        "tags": ["Egress Module"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/egress_module/delete/{egress_module_id}": {
      "delete": {
        "description": "Allows a user to delete an existing egress module associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the egress module to delete.",
            "in": "path",
            "name": "egress_module_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EgressModuleSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Egress module Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Egress with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete egress module",
        "tags": ["Egress Module"]
      }
    },
    "/private/user/{organization_id}/egress_module/retrieve/{egress_module_id}": {
      "get": {
        "description": "Retrieves a specific Egress module based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Egress to retrieve",
            "in": "path",
            "name": "egress_module_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EgressModuleSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Egress module Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Egress Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Egress",
        "tags": ["Egress Module"]
      }
    },
    "/private/user/{organization_id}/egress_module/search": {
      "get": {
        "description": "Search Egress module on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Egress",
            "in": "query",
            "name": "egress_module_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "ID of the Organization",
            "in": "query",
            "name": "organization_id",
            "schema": {}
          },
          {
            "description": "Name of the egress",
            "in": "query",
            "name": "egress_module_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Description of the egress",
            "in": "query",
            "name": "egress_module_description",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Egress was created",
            "in": "query",
            "name": "egress_module_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Egress was last updated",
            "in": "query",
            "name": "egress_module_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EgressModuleSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Egress search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Egress module",
        "tags": ["Egress Module"]
      }
    },
    "/private/user/{organization_id}/geo_fingerprint/create": {
      "post": {
        "description": "Allows a user to create a new geo fingerprint for their organization. The system limits the number of active fingerprints per organization. If the maximum number is reached, the user must remove an existing fingerprint before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "geo_fingerprint_city_alias": {
                    "description": "City alias for the fingerprint.",
                    "type": "string"
                  },
                  "geo_fingerprint_country_id": {
                    "description": "Country ID for the fingerprint.",
                    "maxLength": 4,
                    "type": "string"
                  },
                  "geo_fingerprint_proxy_type": {
                    "description": "Proxy Type for the fingerprint.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The fingerprint creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "geo fingerprint successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created fingerprint.",
                        "type": "integer"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fingerprint Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max fingerprints Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create geo fingerprint",
        "tags": ["Geo Fingerprint"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/geo_fingerprint/delete/{geo_fingerprint_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Geo Fingerprint associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Fingerprint to delete.",
            "in": "path",
            "name": "geo_fingerprint_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoFingerprintSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Fingerprint Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Fingerprint with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Geo Fingerprint",
        "tags": ["Geo Fingerprint"]
      }
    },
    "/private/user/{organization_id}/geo_fingerprint/retrieve/{geo_fingerprint_id}": {
      "get": {
        "description": "Retrieves a specific Geo Fingerprint based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Fingerprint to retrieve",
            "in": "path",
            "name": "geo_fingerprint_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GeoFingerprintSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Geo Fingerprint Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Fingerprint Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Geo Fingerprint",
        "tags": ["Geo Fingerprint"]
      }
    },
    "/private/user/{organization_id}/geo_fingerprint/search": {
      "get": {
        "description": "Search Geo Fingerprint on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Fingerprint",
            "in": "query",
            "name": "geo_fingerprint_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Proxy Type of the fingerprint",
            "in": "query",
            "name": "geo_fingerprint_proxy_type",
            "schema": { "type": "string" }
          },
          {
            "description": "Country ID of the fingerprint",
            "in": "query",
            "name": "geo_fingerprint_country_id",
            "schema": { "maxLength": 4, "type": "string" }
          },
          {
            "description": "City alias of the fingerprint",
            "in": "query",
            "name": "geo_fingerprint_city_alias",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Fingerprint was created",
            "in": "query",
            "name": "geo_fingerprint_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Fingerprint was last updated",
            "in": "query",
            "name": "geo_fingerprint_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GeoFingerprintSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Fingerprint search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Geo Fingerprint",
        "tags": ["Geo Fingerprint"]
      }
    },
    "/private/user/{organization_id}/invoice/pay/{invoice_id}": {
      "post": {
        "description": "Allows a user to retrieve the payment URL for a specified invoice using different payment platforms. Depending on the chosen payment platform, the function can return a Stripe hosted URL or a Bitpay invoice URL. Ensure the required fields are provided in the request body.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to pay the invoice for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the invoice to pay.",
            "in": "path",
            "name": "invoice_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "coinpayments_currency": {
                    "default": "btc",
                    "description": "Cryptocurrency to use for the checkout. Only applicable for if payment_platform is coinpayments.",
                    "enum": [
                      "xmr",
                      "usdt.erc20",
                      "usdc",
                      "ltc",
                      "bnb",
                      "eth",
                      "btc"
                    ],
                    "type": "string"
                  },
                  "payment_method_id": {
                    "description": "ID of a saved payment method to use for the payment. Usually, used for a saved Stripe card. When using, payment_platform must match the saved payment methods platform.",
                    "type": "string"
                  },
                  "payment_platform": {
                    "description": "The payment platform to be used for the payment.",
                    "enum": ["stripe", "bitpay", "coinpayments"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The invoice details and payment platform choice.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "external_payment_id": {
                          "description": "External payment ID, mainly used for Bitpay / Coinpayments.",
                          "type": "string"
                        },
                        "invoice_is_paid": {
                          "description": "Indicates whether the invoice is already paid. Use this to decide whether to redirect the user to the payment URL or not.",
                          "type": "boolean"
                        },
                        "redirect_url": {
                          "description": "The payment URL where the user can complete the payment.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "edited": {
                      "description": "List of Invoice IDs that were successfully edited.",
                      "example": ["inv_234mdi123jJNL23"],
                      "items": {
                        "description": "The Invoice ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating that the payment URL was created.",
                      "example": "Successfully created payment URL.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created payment URL."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Invoice not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable Entity - Either the invoice is not payable or it's not open."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Pay Invoice",
        "tags": ["Invoice"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/invoice/pay_option/{invoice_id}": {
      "get": {
        "description": "Allows a user to retrieve the payment options for an open invoice. Will return a list of off playform options along with saved payment methods as well as disallowed options with the reason they are not available for the invoice.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Invoice to retrieve",
            "in": "path",
            "name": "invoice_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "allowed_coinpayments_currencies": {
                          "description": "List of allowed currencies for coin payments.",
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "allowed_payment_platforms": {
                          "description": "List of allowed payment platforms like Stripe, Bitpay.",
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "allowed_saved_payment_methods": {
                          "description": "List of allowed saved payment methods with details.",
                          "items": {
                            "properties": {
                              "payment_method_expiry_month": {
                                "type": "integer"
                              },
                              "payment_method_expiry_year": {
                                "type": "integer"
                              },
                              "payment_method_id": { "type": "string" },
                              "payment_method_last_four": { "type": "string" },
                              "payment_method_network": { "type": "string" },
                              "payment_method_platform": { "type": "string" },
                              "payment_method_type": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "disallowed_coinpayments_currencies": {
                          "description": "List of disallowed currencies with reasons.",
                          "items": {
                            "properties": {
                              "currency": { "type": "string" },
                              "disallow_reason": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "disallowed_payment_platforms": {
                          "description": "List of disallowed payment platforms with reasons.",
                          "items": {
                            "properties": {
                              "disallow_reason": { "type": "string" },
                              "payment_platform": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message indicating that payment options were verified.",
                      "example": "Successfully verified invoice payment options.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully verified invoice payment options."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Invoice not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable Entity - Either the invoice is not payable or it's not open."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Pay Invoice Option",
        "tags": ["Invoice"]
      }
    },
    "/private/user/{organization_id}/invoice/release/{invoice_id}": {
      "post": {
        "description": "Allows a user to release an invoice cart, thereby voiding the invoice. This operation might be necessary if the invoice is no longer required or valid. This function works mainly with Stripe invoices. If the invoice is associated with a subscription, the subscription is canceled. If not, the invoice is voided.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the invoice to release.",
            "in": "path",
            "name": "invoice_id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of Invoice IDs that were successfully released and voided.",
                      "example": ["inv_234mdi123jJNL23"],
                      "items": {
                        "description": "The Invoice ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating that the invoice cart was released.",
                      "example": "Cart successfully released.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully released the invoice cart."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Invoice cart not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable Entity - Either the invoice cart couldn't be retrieved or it's not open."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Release Invoice Cart",
        "tags": ["Invoice"]
      }
    },
    "/private/user/{organization_id}/invoice/retrieve/{invoice_id}": {
      "get": {
        "description": "Retrieves a specific Invoice based on the provided ID for the current user's account. Additional details like transactions and balance transactions can also be fetched based on query parameters.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Invoice to retrieve",
            "in": "path",
            "name": "invoice_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceSuccessfulRetrieveResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "balance_transactions": {
                              "items": {
                                "$ref": "#/components/schemas/BalanceTransaction"
                              },
                              "type": "array"
                            },
                            "transactions": {
                              "items": {
                                "$ref": "#/components/schemas/Transaction"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful Invoice Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Invoice Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Invoice",
        "tags": ["Invoice"]
      }
    },
    "/private/user/{organization_id}/invoice/search": {
      "get": {
        "description": "Search Invoices on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Invoice",
            "in": "query",
            "name": "invoice_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount paid for the Invoice",
            "in": "query",
            "name": "invoice_amount_paid",
            "schema": { "format": "float", "type": "number" }
          },
          {
            "description": "Total amount of the Invoice",
            "in": "query",
            "name": "invoice_total",
            "schema": { "format": "float", "type": "number" }
          },
          {
            "description": "Discounts applied to the Invoice",
            "explode": false,
            "in": "query",
            "name": "invoice_discounts",
            "schema": { "items": { "type": "string" }, "type": "array" },
            "style": "form"
          },
          {
            "description": "Due datetime for the Invoice",
            "in": "query",
            "name": "invoice_due_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Status of the Invoice",
            "in": "query",
            "name": "invoice_status",
            "schema": { "enum": ["open", "paid", "void"], "type": "string" }
          },
          {
            "description": "Type of the Invoice",
            "in": "query",
            "name": "invoice_type",
            "schema": {
              "enum": ["stripe", "bitpay", "internal"],
              "type": "string"
            }
          },
          {
            "description": "Service ID associated with the Invoice",
            "in": "query",
            "name": "service_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Whether the Invoice has automatic collection enabled",
            "in": "query",
            "name": "invoice_is_automatic_collection",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the Invoice is a cart",
            "in": "query",
            "name": "invoice_is_cart",
            "schema": { "type": "boolean" }
          },
          {
            "description": "PDF associated with the Invoice",
            "in": "query",
            "name": "invoice_pdf",
            "schema": { "type": "string" }
          },
          {
            "description": "URL of the Invoice",
            "in": "query",
            "name": "invoice_url",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Invoice was created",
            "in": "query",
            "name": "invoice_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Invoice was last updated",
            "in": "query",
            "name": "invoice_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceSuccessfulSearchResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "balance_transactions": {
                                "items": {
                                  "$ref": "#/components/schemas/BalanceTransaction"
                                },
                                "type": "array"
                              },
                              "transactions": {
                                "items": {
                                  "$ref": "#/components/schemas/Transaction"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful Invoice search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Invoices",
        "tags": ["Invoice"]
      }
    },
    "/private/user/{organization_id}/job/create": {
      "post": {
        "operationId": "create_private_user__organization_id__job_create_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" },
          "422": { "content": {}, "description": "Validation Error" }
        },
        "summary": "Create",
        "tags": ["Private", "User", "Job"]
      }
    },
    "/private/user/{organization_id}/job/edit/{job_id}": {
      "patch": {
        "description": "Edit job details. Only the owner of the organization can edit a job.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve job analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job to retrieve",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "job_status": {
                    "description": "The status of the job",
                    "example": "completed",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The job details to be edited.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of job IDs that were successfully edited.",
                      "example": ["123e4567-e89b-12d3-a456-426614174000"],
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the job details were edited.",
                      "example": "Job successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Job Successfully Edited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Job Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit Job",
        "tags": ["Job"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/job/retrieve/{job_id}": {
      "get": {
        "description": "Retrieves a specific Job based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve job analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job to retrieve",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobRunSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Job Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Job",
        "tags": ["Job"]
      }
    },
    "/private/user/{organization_id}/job/search": {
      "get": {
        "description": "Search Job on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job",
            "in": "query",
            "name": "job_id",
            "schema": {}
          },
          {
            "description": "ID of the Project",
            "in": "query",
            "name": "project_id",
            "schema": {}
          },
          {
            "description": "Type of the Job",
            "in": "query",
            "name": "job_type",
            "schema": { "type": "string" }
          },
          {
            "description": "Status of the Job",
            "in": "query",
            "name": "job_status",
            "schema": { "type": "string" }
          },
          {
            "description": "Reason the Job was stopped",
            "in": "query",
            "name": "job_run_stop_reason",
            "schema": { "type": "string" }
          },
          {
            "description": "Flag to indicate if JavaScript is enabled",
            "in": "query",
            "name": "job_js_rendering",
            "schema": { "type": "boolean" }
          },
          {
            "description": "ID of the Device Fingerprint",
            "in": "query",
            "name": "device_fingerprint_id",
            "schema": {}
          },
          {
            "description": "ID of the Geo Fingerprint",
            "in": "query",
            "name": "geo_fingerprint_id",
            "schema": {}
          },
          {
            "description": "ID of the Egress Configuration",
            "in": "query",
            "name": "egress_configuration_id",
            "schema": {}
          },
          {
            "description": "Interval of the Job",
            "in": "query",
            "name": "job_interval",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Number of times the Job has been run",
            "in": "query",
            "name": "job_run_count",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Maximum number of times the Job can be run",
            "in": "query",
            "name": "job_max_run_count",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Datetime the Job ends",
            "in": "query",
            "name": "job_end_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Job is scheduled",
            "in": "query",
            "name": "job_schedule_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Budget of the Job",
            "in": "query",
            "name": "job_budget",
            "schema": { "format": "double", "type": "number" }
          },
          {
            "description": "Cost of the Job",
            "in": "query",
            "name": "job_cost",
            "schema": { "format": "double", "type": "number" }
          },
          {
            "description": "Datetime the Job was created",
            "in": "query",
            "name": "job_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Job was last updated",
            "in": "query",
            "name": "job_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Job",
        "tags": ["Job"]
      }
    },
    "/private/user/{organization_id}/job_run/retrieve/{job_run_id}": {
      "get": {
        "description": "Retrieves a specific Job Run based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve job run analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job Run to retrieve",
            "in": "path",
            "name": "job_run_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobRunSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job Run Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Job Run Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Job Run",
        "tags": ["Job Run"]
      }
    },
    "/private/user/{organization_id}/job_run/search": {
      "get": {
        "description": "Search Job Run on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job Run",
            "in": "query",
            "name": "job_run_id",
            "schema": {}
          },
          {
            "description": "ID of the Job",
            "in": "query",
            "name": "job_id",
            "schema": {}
          },
          {
            "description": "Status of the Job Run",
            "in": "query",
            "name": "job_run_status",
            "schema": { "type": "string" }
          },
          {
            "description": "Reason the Job Run was stopped",
            "in": "query",
            "name": "job_run_stop_reason",
            "schema": { "type": "string" }
          },
          {
            "description": "Cost of the Job Run",
            "in": "query",
            "name": "job_run_cost",
            "schema": { "format": "double", "type": "number" }
          },
          {
            "description": "Number of tasks created in the Job Run",
            "in": "query",
            "name": "job_run_created_task_count",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Number of tasks successfully completed in the Job Run",
            "in": "query",
            "name": "job_run_successful_task_count",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Number of tasks failed in the Job Run",
            "in": "query",
            "name": "job_run_failed_task_count",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Datetime the Job Run was created",
            "in": "query",
            "name": "job_run_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Job Run was last updated",
            "in": "query",
            "name": "job_run_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobRunSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job Run search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Job Run",
        "tags": ["Job Run"]
      }
    },
    "/private/user/{organization_id}/job_target/retrieve/{job_target_id}": {
      "get": {
        "description": "Retrieves a specific Job Target based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve job target analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job Target to retrieve",
            "in": "path",
            "name": "job_target_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobRunSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job Target Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Job Target Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Job Target",
        "tags": ["Job Target"]
      }
    },
    "/private/user/{organization_id}/job_target/search": {
      "get": {
        "description": "Search Job Target on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Job Target",
            "in": "query",
            "name": "job_target_id",
            "schema": {}
          },
          {
            "description": "ID of the Job",
            "in": "query",
            "name": "job_id",
            "schema": {}
          },
          {
            "description": "URL of the Job Target",
            "in": "query",
            "name": "job_target_url",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Job Target was created",
            "in": "query",
            "name": "job_target_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Job Target was last updated",
            "in": "query",
            "name": "job_target_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JobRunSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Job Target search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Job Target",
        "tags": ["Job Target"]
      }
    },
    "/private/user/{organization_id}/organization/edit": {
      "patch": {
        "description": "Allows authenticated users to edit their organization details. Changes to email address, password, or enabling email two-factor authentication require an additional two-factor authentication step. Ensure that the appropriate fields are provided in the request body.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to edit.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "country_id_billing": {
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
                    "type": "string"
                  },
                  "organization_billing_line_one": {
                    "description": "First line of the organization billing address.",
                    "type": "string"
                  },
                  "organization_billing_line_two": {
                    "description": "Second line of the organization billing address (optional).",
                    "type": "string"
                  },
                  "organization_billing_name": {
                    "description": "Full name for billing purposes.",
                    "type": "string"
                  },
                  "organization_billing_subdivision_name": {
                    "description": "State, province, or other subdivision name of the organization billing address.",
                    "type": "string"
                  },
                  "organization_billing_zip_code": {
                    "description": "Postal or ZIP code of the organization billing address.",
                    "type": "string"
                  },
                  "two_factor_authentication_private_key": {
                    "description": "Required if prompted by the API. Private 2FA key provided by the organization and sent to them via email or SMS. [Conditional]",
                    "type": "string"
                  },
                  "two_factor_authentication_public_key": {
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The organization details to be edited.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of organization IDs that were successfully edited.",
                      "example": [132452],
                      "items": {
                        "description": "The organization ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the organization details were edited.",
                      "example": "organization successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "organization Successfully Edited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "organization Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "499": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            },
            "description": "Two-Factor Authentication Required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit organization Details",
        "tags": ["Organization"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/organization/retrieve": {
      "get": {
        "description": "Retrieves the profile of the currently authenticated organization, along with their credit balance.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to edit.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/OrganizationSuccessfulRetrieveResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "country_id_billing": {
                              "example": "gb",
                              "type": "string"
                            },
                            "organization_billing_line_one": {
                              "example": "123 Fake Street",
                              "type": "string"
                            },
                            "organization_billing_line_two": {
                              "example": "Fake Town",
                              "type": "string"
                            },
                            "organization_billing_name": {
                              "example": "Fake Company",
                              "type": "string"
                            },
                            "organization_billing_subdivision_name": {
                              "example": "Fake County",
                              "type": "string"
                            },
                            "organization_billing_zip": {
                              "example": "FA1 2KE",
                              "type": "string"
                            },
                            "organization_credit_balance": {
                              "example": 10000,
                              "type": "integer"
                            },
                            "organization_tax_id": {
                              "example": "GB123456789",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful Organization Profile Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Organization Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Current Organization",
        "tags": ["Organization"]
      }
    },
    "/private/user/{organization_id}/payment_method/delete/{payment_method_id}": {
      "delete": {
        "description": "Allows a user to delete an existing payment method associated with their account. Payment methods that are attached to service subscriptions can not be deleted until they are removed from such subscriptions.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the payment method to delete.",
            "in": "path",
            "name": "payment_method_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Payment Method Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request - payment_method_id must be provided"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - Payment Method not found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Payment Method attached to subscriptions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Payment Method",
        "tags": ["Payment Method"]
      }
    },
    "/private/user/{organization_id}/payment_method/edit/{payment_method_id}": {
      "patch": {
        "description": "This endpoint allows a user to edit an existing Payment Method by providing the necessary payment_method_id.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Payment Method record to edit.",
            "in": "path",
            "name": "payment_method_id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_method_billing_name": {
                    "description": "The billing name associated with the Payment Method.",
                    "type": "string"
                  },
                  "payment_method_expiry_month": {
                    "description": "The expiry month in integer format 1-12 of the Payment Method.",
                    "type": "integer"
                  },
                  "payment_method_expiry_year": {
                    "description": "The expiry year in integer format of the Payment Method.",
                    "type": "integer"
                  },
                  "payment_method_is_default": {
                    "description": "Determines whether the Payment Method is the default Payment Method for the user.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The Payment Method details to be edited.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of Payment Method IDs that were successfully edited.",
                      "example": ["pm_Zkx2kJSpqsjkkc8x"],
                      "items": {
                        "description": "The Payment Method ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the Payment Method was edited.",
                      "example": "Payment Method successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment Method Successfully Edited"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Payment Method Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConflictResponse" }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit Payment Method",
        "tags": ["Payment Method"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/payment_method/retrieve/{payment_method_id}": {
      "get": {
        "description": "Retrieves a specific Payment Method based on the provided ID for the current user's account. Additional related objects to the payment method can be fetched and added to the result if necessary.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Payment Method to retrieve",
            "in": "path",
            "name": "payment_method_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Payment Method Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Payment Method Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Payment Method",
        "tags": ["Payment Method"]
      }
    },
    "/private/user/{organization_id}/payment_method/search": {
      "get": {
        "description": "Search Payment Methods on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Payment Method",
            "in": "query",
            "name": "payment_method_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Billing name associated with the Payment Method",
            "in": "query",
            "name": "payment_method_billing_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Fingerprint of the Payment Method",
            "in": "query",
            "name": "payment_method_fingerprint",
            "schema": { "type": "string" }
          },
          {
            "description": "Last four digits of the Payment Method",
            "in": "query",
            "name": "payment_method_last_four",
            "schema": { "type": "string" }
          },
          {
            "description": "Network of the Payment Method (e.g., visa)",
            "in": "query",
            "name": "payment_method_network",
            "schema": { "type": "string" }
          },
          {
            "description": "Platform of the Payment Method",
            "in": "query",
            "name": "payment_method_platform",
            "schema": {
              "enum": ["stripe", "bitpay", "coinpayments"],
              "type": "string"
            }
          },
          {
            "description": "Status of the Payment Method",
            "in": "query",
            "name": "payment_method_status",
            "schema": { "enum": ["attached", "detached"], "type": "string" }
          },
          {
            "description": "Type of the Payment Method",
            "in": "query",
            "name": "payment_method_type",
            "schema": { "enum": ["card"], "type": "string" }
          },
          {
            "description": "Whether the Payment Method is default",
            "in": "query",
            "name": "payment_method_is_default",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Expiry month of the Payment Method",
            "in": "query",
            "name": "payment_method_expiry_month",
            "schema": { "type": "integer" }
          },
          {
            "description": "Expiry year of the Payment Method",
            "in": "query",
            "name": "payment_method_expiry_year",
            "schema": { "type": "integer" }
          },
          {
            "description": "Datetime the Payment Method was created",
            "in": "query",
            "name": "payment_method_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Payment Method was last updated",
            "in": "query",
            "name": "payment_method_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Payment Method search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Payment Methods",
        "tags": ["Payment Method"]
      }
    },
    "/private/user/{organization_id}/payment_method/setup": {
      "post": {
        "description": "This endpoint facilitates the setup of a payment method for the authenticated user, with specific platform support (e.g., stripe). The returned value provides a URL redirect for the user to complete the setup on the respective platform.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_platform": {
                    "default": "stripe",
                    "description": "Platform used for the payment (e.g., stripe).",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Payment Method Set Up Information",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "redirect_url": {
                          "description": "URL redirect for the user to complete the payment setup on the respective platform",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Message indicating the success of the setup initiation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully created payment setup URL."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Set Up Payment Method",
        "tags": ["Payment Method"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/product/search": {
      "get": {
        "description": "Search Products entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to search products for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Unique identifier of the Product",
            "in": "query",
            "name": "product_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Type associated with the Product",
            "in": "query",
            "name": "product_type",
            "schema": { "enum": ["token"], "type": "string" }
          },
          {
            "description": "Country ID for the region of the product",
            "in": "query",
            "name": "country_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Whether the Product is active",
            "in": "query",
            "name": "product_is_active",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the Product is one per user",
            "in": "query",
            "name": "product_is_one_per_user",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the Product is one active per user",
            "in": "query",
            "name": "product_is_one_active_per_user",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the Product is one per IP",
            "in": "query",
            "name": "product_is_per_ip",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Creation datetime of the Product",
            "in": "query",
            "name": "product_creation_datetime",
            "schema": { "type": "string" }
          },
          {
            "description": "Last update datetime of the Product",
            "in": "query",
            "name": "product_last_update_datetime",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "country_id": { "example": "null", "type": "string" },
                          "product_creation_datetime": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "product_description": {
                            "example": "null",
                            "type": "string"
                          },
                          "product_id": {
                            "example": "prod_OPavByPppOW0U9",
                            "type": "string"
                          },
                          "product_image": {
                            "example": "https://files.stripe.com/links/MDB8YWNjdF8xSDdkOEFCMkJVbHFpbTVsfGZsX2xpdmVfUTFPQXRNTGdXNVFad2dLTDZnSm01a3dz00bEOl840O",
                            "type": "string"
                          },
                          "product_instock": {
                            "example": true,
                            "type": "boolean"
                          },
                          "product_is_active": {
                            "example": true,
                            "type": "boolean"
                          },
                          "product_is_available": {
                            "example": true,
                            "type": "boolean"
                          },
                          "product_is_per_ip": {
                            "example": false,
                            "type": "boolean"
                          },
                          "product_is_visible": {
                            "example": true,
                            "type": "boolean"
                          },
                          "product_last_update_datetime": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "product_name": {
                            "example": "Tokens",
                            "type": "string"
                          },
                          "product_prices": {
                            "items": {
                              "properties": {
                                "price_amount": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "price_cycle_interval": {
                                  "example": "day",
                                  "type": "string"
                                },
                                "price_cycle_interval_count": {
                                  "example": 3,
                                  "type": "integer"
                                },
                                "price_id": {
                                  "example": "price_1NcljeB2BUlqim5lyM2hkvps",
                                  "type": "string"
                                },
                                "price_is_subscription": {
                                  "example": false,
                                  "type": "boolean"
                                },
                                "price_package_quantity": {
                                  "example": 10,
                                  "type": "integer"
                                },
                                "price_per_unit_amount": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "price_tier_type": {
                                  "example": "volume",
                                  "type": "string"
                                },
                                "price_tiers": {
                                  "items": {
                                    "properties": {
                                      "price_tier_amount": {
                                        "example": "150",
                                        "type": "string"
                                      },
                                      "price_tier_up_to": {
                                        "example": 24,
                                        "type": "integer"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "price_type": {
                                  "example": "one_time",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "product_stock": { "example": -1, "type": "integer" },
                          "product_type": {
                            "example": "credit",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Product search with stock successfully completed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Search Product",
        "tags": ["Product"]
      }
    },
    "/private/user/{organization_id}/project/create": {
      "post": {
        "description": "Allows a user to create a new project for their organization. The system limits the number of active projects per organization. If the maximum number is reached, the user must remove an existing project before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "project_description": {
                    "description": "Description for the project.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "project_name": {
                    "description": "Name for the project.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The project creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "Project successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created project.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Project Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max Projects Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create Project",
        "tags": ["Project"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/project/delete/{project_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Project associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Project to delete.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Project Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Project with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Project",
        "tags": ["Project"]
      }
    },
    "/private/user/{organization_id}/project/retrieve/{project_id}": {
      "get": {
        "description": "Retrieves a specific Project based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Project to retrieve",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProjectSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Project Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Project Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Project",
        "tags": ["Project"]
      }
    },
    "/private/user/{organization_id}/project/search": {
      "get": {
        "description": "Search Project on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Project",
            "in": "query",
            "name": "project_id",
            "schema": {}
          },
          {
            "description": "Name of the project",
            "in": "query",
            "name": "project_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Description of the project",
            "in": "query",
            "name": "project_description",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Project was created",
            "in": "query",
            "name": "project_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Project was last updated",
            "in": "query",
            "name": "project_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProjectSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Project search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Project",
        "tags": ["Project"]
      }
    },
    "/private/user/{organization_id}/service/cancel/{service_id}": {
      "delete": {
        "description": "Allows the authenticated user to cancel a specific service associated with their account. The user provides a service_id and optionally a cancel feedback and comment.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service to cancel",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cancel_comment": {
                    "description": "A short comment explaining the reason for cancellation. Maximum 300 characters.",
                    "maxLength": 300,
                    "type": "string"
                  },
                  "cancel_feedback": {
                    "description": "Feedback code indicating the cancellation reason.\n",
                    "enum": [
                      "too_expensive",
                      "missing_features",
                      "switched_service",
                      "unused",
                      "user_service",
                      "too_complex",
                      "low_quality",
                      "other"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Service cancellation details.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of service IDs that were successfully canceled.",
                      "example": ["198-534-243"],
                      "items": {
                        "description": "The service ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message indicating the successful cancellation of the service.",
                      "example": "Service successfully canceled.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully canceled the service."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad request due to invalid parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Service not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Invalid or unprocessable request due to inconsistency between parameters or service is not active."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Cancel Service",
        "tags": ["Service"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/service/edit/{service_id}": {
      "patch": {
        "description": "Allows a user to edit the details of an existing service. This can include changes in payment method, adjusting automatic collection, and marking for cancellation at the end of a period.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service to edit",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Content type for the request body as application/json.",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": { "default": "application/json", "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cancel_comment": {
                    "description": "Comment regarding the cancellation.",
                    "type": "string"
                  },
                  "cancel_feedback": {
                    "description": "Feedback reasons for cancellation.",
                    "type": "string"
                  },
                  "payment_method_id": {
                    "description": "New payment method ID.",
                    "type": "string"
                  },
                  "service_is_automatic_collection": {
                    "description": "Flag to determine if service charge should be automatic.",
                    "type": "boolean"
                  },
                  "service_is_pending_cancellation": {
                    "description": "Indicates if the service should be canceled at the end of the period.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Parameters required to edit the service.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of service IDs that were successfully edited.",
                      "example": ["198-534-243"],
                      "items": {
                        "description": "The service ID.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "Success message.",
                      "example": "Service successfully edited.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully edited the service."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad request due to invalid parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Service or Payment Method not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Invalid request due to service status or other conditions."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Edit Service",
        "tags": ["Service"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/service/reconfigure/{service_id}": {
      "post": {
        "description": "This endpoint allows an authenticated user to reconfigure an existing service associated with their account. The user provides a service_id along with new configuration parameters such as price ID, quantity, and whether the changes should apply at the end of the billing period. The function validates the input, applies the changes, and commits them to the database. It also sends a notification email to the user about the service reconfiguration.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service to be reconfigured",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_of_period": {
                    "description": "Indicates if changes apply at the end of the billing period.",
                    "type": "boolean"
                  },
                  "service_price_id": {
                    "description": "New service price ID for reconfiguration.",
                    "type": "string"
                  },
                  "service_quantity": {
                    "description": "New service quantity for reconfiguration.",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New configuration details for the service.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of service IDs that were successfully reconfigured.",
                      "items": { "type": "string" },
                      "type": "array"
                    },
                    "message": {
                      "description": "Confirmation message of successful service reconfiguration.",
                      "example": "Service successfully reconfigured with price_id price_1OCM6DFKo7UQ3XWIPqdvUFuJ and quantity 20.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully reconfigured the service."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "edited": {
                      "description": "List of service IDs that were successfully reconfigured.",
                      "items": { "type": "string" },
                      "type": "array"
                    },
                    "message": {
                      "description": "Confirmation message including details of the subscription schedule created.",
                      "type": "string"
                    },
                    "subscription_schedule_created": {
                      "description": "List of subscription schedule IDs created for the reconfiguration.",
                      "items": { "type": "integer" },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Service reconfigured and subscription schedule created for changes to apply at the end of the billing period."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad request due to invalid parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Service not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable request due to invalid reconfiguration parameters."
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Reconfigure an Existing Service",
        "tags": ["Service"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/service/reconfigure_calculate/{service_id}": {
      "post": {
        "description": "Allows the authenticated user to calculate the details for reconfiguring a specific service associated with their account. The user provides a service_id and reconfiguration parameters such as service price ID, service quantity, end of period flag. The system validates and calculates the new configuration, returning details like new price, quantity, and total cost.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service to reconfigure",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_of_period": {
                    "description": "Flag to indicate if the reconfiguration should apply at the end of the current billing period.",
                    "type": "boolean"
                  },
                  "service_price_id": {
                    "description": "The new service price ID for the reconfiguration.",
                    "type": "string"
                  },
                  "service_quantity": {
                    "description": "The new service quantity for the reconfiguration.",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Reconfiguration details for the service.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "anchor_behavior": {
                      "description": "Specifies the behavior of the anchor for the reconfiguration.",
                      "type": "string"
                    },
                    "due": {
                      "description": "Specifies when the reconfiguration takes effect.",
                      "type": "string"
                    },
                    "end_of_period": {
                      "description": "Indicates if the reconfiguration applies at the end of the current billing period.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Success message indicating the successful calculation of reconfiguration.",
                      "example": "Service reconfiguration option validated and calculated.",
                      "type": "string"
                    },
                    "proration_behavior": {
                      "description": "Specifies the proration behavior for the reconfiguration.",
                      "type": "string"
                    },
                    "service_price_id": {
                      "description": "The new service price ID resulting from the reconfiguration.",
                      "type": "string"
                    },
                    "service_quantity": {
                      "description": "The new service quantity resulting from the reconfiguration.",
                      "type": "integer"
                    },
                    "total": {
                      "description": "The total cost resulting from the reconfiguration.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully calculated the service reconfiguration details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad request due to invalid parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Service not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Unprocessable request due to invalid reconfiguration parameters."
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Calculate Reconfiguration Details for a Service",
        "tags": ["Service"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/service/reconfigure_option/{service_id}": {
      "get": {
        "description": "Enables the authenticated user to view available reconfiguration options for a specific service associated with their account. The user provides a service_id, and the system returns a list of possible reconfiguration options based on the service type, status, and other parameters.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve the service from.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service for which to retrieve reconfigure options",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "description": "Success message indicating the retrieval of reconfigure options.",
                      "example": "Service reconfigure option list successfully generated.",
                      "type": "string"
                    },
                    "reconfigure_option": {
                      "description": "List of available reconfiguration options for the service.",
                      "items": {
                        "properties": {
                          "end_of_period": {
                            "description": "Indicates if the reconfiguration applies at the end of the current billing period.",
                            "type": "boolean"
                          },
                          "max_service_quantity": {
                            "description": "Maximum service quantity available for reconfiguration.",
                            "type": "integer"
                          },
                          "min_service_quantity": {
                            "description": "Minimum service quantity required for reconfiguration.",
                            "type": "integer"
                          },
                          "product_prices": {
                            "description": "List of product prices applicable for reconfiguration.",
                            "items": {
                              "description": "Detailed information about each product price.",
                              "properties": {},
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved the list of reconfigure options."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad request due to invalid parameters."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundResponse" }
              }
            },
            "description": "Service or current product not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            },
            "description": "Service cannot be reconfigured due to its current status, lack of a subscription, or presence of a subscription schedule."
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Reconfigure Options for a Service",
        "tags": ["Service"]
      }
    },
    "/private/user/{organization_id}/service/retrieve/{service_id}": {
      "get": {
        "description": "Retrieves a specific Service based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service to retrieve",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "If the proxies associated with the service should be returned",
            "in": "query",
            "name": "proxies",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful Service Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Service Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Service",
        "tags": ["Service"]
      }
    },
    "/private/user/{organization_id}/service/search": {
      "get": {
        "description": "Search Services on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the service",
            "in": "query",
            "name": "service_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Current status of the service",
            "in": "query",
            "name": "service_status",
            "schema": {
              "enum": [
                "awaiting_fulfillment",
                "awaiting_manual_fulfillment",
                "awaiting_additional",
                "fulfillment",
                "active",
                "canceled",
                "complete",
                "overdue"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name of the service",
            "in": "query",
            "name": "service_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Type of the service",
            "in": "query",
            "name": "service_type",
            "schema": { "enum": ["token"], "type": "string" }
          },
          {
            "description": "Quantity of the service",
            "in": "query",
            "name": "service_quantity",
            "schema": { "type": "integer" }
          },
          {
            "description": "Payment method ID of the service",
            "in": "query",
            "name": "payment_method_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Total amount of the service",
            "in": "query",
            "name": "service_total",
            "schema": { "type": "string" }
          },
          {
            "description": "Service cycle (e.g., \"1:month\")",
            "in": "query",
            "name": "service_cycle",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the service was dispatched",
            "in": "query",
            "name": "service_dispatch_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the service will expire",
            "in": "query",
            "name": "service_expiry_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "URL of the service image",
            "in": "query",
            "name": "service_image",
            "schema": { "type": "string" }
          },
          {
            "description": "If the service is set for automatic collection",
            "in": "query",
            "name": "service_is_automatic_collection",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If the service is pending cancellation",
            "in": "query",
            "name": "service_is_pending_cancellation",
            "schema": { "type": "boolean" }
          },
          {
            "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
            "in": "query",
            "name": "country_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Price ID of the service",
            "in": "query",
            "name": "service_price_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Product ID of the service",
            "in": "query",
            "name": "product_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Promotional code of the service",
            "in": "query",
            "name": "service_promotional_code",
            "schema": { "type": "string" }
          },
          {
            "description": "Subscription ID of the service",
            "in": "query",
            "name": "service_subscription_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Datetime the service was created",
            "in": "query",
            "name": "service_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the service was last updated",
            "in": "query",
            "name": "service_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "If the proxies associated with the service should be returned",
            "in": "query",
            "name": "proxies",
            "schema": { "type": "boolean" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": { "content": {}, "description": "Successful Service search" },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Services",
        "tags": ["Service"]
      }
    },
    "/private/user/{organization_id}/service_adjustment/retrieve/{service_adjustment_id}": {
      "get": {
        "description": "Retrieves a specific Service Adjustment based on the provided ID for the current user's account. The returned adjustment provides details about any modifications or updates made to the user's service.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Service Adjustment to retrieve",
            "in": "path",
            "name": "service_adjustment_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful Service Adjustment Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Service Adjustment Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Service Adjustment",
        "tags": ["Service Adjustment"]
      }
    },
    "/private/user/{organization_id}/service_adjustment/search": {
      "get": {
        "description": "Search Service Adjustments on the organization using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the invoice",
            "in": "query",
            "name": "invoice_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Service ID associated with the service adjustment",
            "in": "query",
            "name": "service_id",
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the service adjustment",
            "in": "query",
            "name": "service_adjustment_id",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Type of the service adjustment",
            "in": "query",
            "name": "service_adjustment_type",
            "schema": {
              "enum": ["ingestion", "fulfillment", "update", "extension"],
              "type": "string"
            }
          },
          {
            "description": "Current status of the service adjustment",
            "in": "query",
            "name": "service_adjustment_status",
            "schema": {
              "enum": ["pending", "complete", "failed"],
              "type": "string"
            }
          },
          {
            "description": "Whether the adjustment was made by an administrator",
            "in": "query",
            "name": "service_adjustment_is_administrator",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the adjustment was made automatically",
            "in": "query",
            "name": "service_adjustment_is_automatic",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Whether the adjustment was made by a user",
            "in": "query",
            "name": "service_adjustment_is_user",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Datetime the service adjustment was created",
            "in": "query",
            "name": "service_adjustment_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the service adjustment was last updated",
            "in": "query",
            "name": "service_adjustment_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful Service Adjustment search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Service Adjustments",
        "tags": ["Service Adjustment"]
      }
    },
    "/private/user/{organization_id}/subscription_schedule/delete/{subscription_schedule_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Subscription Schedule associated with their account. The system sets the status of the Subscription Schedule to \"deleted\".\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Subscription Schedule to delete.",
            "in": "path",
            "name": "subscription_schedule_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Subscription Schedule Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Subscription Schedule with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Subscription Schedule",
        "tags": ["Subscription Schedule"]
      }
    },
    "/private/user/{organization_id}/subscription_schedule/retrieve/{subscription_schedule_id}": {
      "get": {
        "description": "Retrieves a specific Subscription Schedule based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Subscription Schedule to retrieve",
            "in": "path",
            "name": "subscription_schedule_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Subscription Schedule Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Subscription Schedule Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Subscription Schedule",
        "tags": ["Subscription Schedule"]
      }
    },
    "/private/user/{organization_id}/subscription_schedule/search": {
      "get": {
        "description": "Search subscription schedule entries on the user account using various filters, including details from associated service subscriptions. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Subscription Schedule",
            "in": "query",
            "name": "subscription_schedule_id",
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the associated Service Subscription",
            "in": "query",
            "name": "service_subscription_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Type of the Subscription Schedule",
            "in": "query",
            "name": "subscription_schedule_type",
            "schema": {
              "enum": [
                "end_of_introductory_offer",
                "change_price",
                "increase_quantity",
                "decrease_quantity",
                "increase_quantity_change_price",
                "decrease_quantity_change_price"
              ],
              "type": "string"
            }
          },
          {
            "description": "Status of the Subscription Schedule",
            "in": "query",
            "name": "subscription_schedule_status",
            "schema": {
              "enum": [
                "not_started",
                "active",
                "completed",
                "released",
                "canceled"
              ],
              "type": "string"
            }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Subscription Schedule search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Subscription Schedules",
        "tags": ["Subscription Schedule"]
      }
    },
    "/private/user/{organization_id}/task/analytics": {
      "get": {
        "description": "This endpoint analyzes tasks for a given user within a specified time range and interval. It provides a summary including total bytes, total number of requests, errors, and successful requests, segmented by the specified intervals. The analysis can be done on immediate task data or task summaries, depending on the retention period.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve task analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "The minimum datetime for the creation of tasks to consider in the analysis.",
            "in": "query",
            "name": "min_task_creation_datetime",
            "required": true,
            "schema": {
              "default": "7 days ago",
              "format": "datetime",
              "type": "string"
            }
          },
          {
            "description": "The maximum datetime for the creation of tasks to consider in the analysis.",
            "in": "query",
            "name": "max_task_creation_datetime",
            "required": true,
            "schema": {
              "default": "current datetime",
              "format": "datetime",
              "type": "string"
            }
          },
          {
            "description": "The interval for summarizing analytics. Must be in the format <integer> <unit> where <unit> is one of minute, hour, day. Accepted granulaity is per minute up to one hour, per ten minutes up to 72 hours, per hour up to one week and per day up to one year.",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": { "default": "1 hour", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "intervals": {
                          "description": "Detailed breakdown of bytes, requests, errors, and successful tasks for each interval.",
                          "items": {
                            "properties": {
                              "bytes": { "type": "integer" },
                              "error": { "type": "integer" },
                              "interval": { "type": "string" },
                              "requests": { "type": "integer" },
                              "successful": { "type": "integer" }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total_bytes": {
                          "description": "The total number of bytes taskged in the given period.",
                          "type": "integer"
                        },
                        "total_error": {
                          "description": "The total number of error tasks in the given period.",
                          "type": "integer"
                        },
                        "total_requests": {
                          "description": "The total number of task requests in the given period.",
                          "type": "integer"
                        },
                        "total_successful": {
                          "description": "The total number of successful task entries in the given period.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "Success message.",
                      "example": "Task analysis successful.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Task analysis successful."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Task Analytics",
        "tags": ["Task"]
      }
    },
    "/private/user/{organization_id}/task/create": {
      "post": {
        "tags": ["Private", "User", "Task"],
        "summary": "Create",
        "operationId": "create_private_user__organization_id__task_create_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            },
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TaskInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": { "description": "Not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/private/user/{organization_id}/task/retrieve/{task_id}": {
      "get": {
        "description": "Retrieves a specific Task based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve task analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Task to retrieve",
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TaskSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Task Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Task Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Task",
        "tags": ["Task"]
      }
    },
    "/private/user/{organization_id}/task/search": {
      "get": {
        "description": "Search Tasks on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve task analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Task",
            "in": "query",
            "name": "task_id",
            "schema": {}
          },
          {
            "description": "ID of the Job Run",
            "in": "query",
            "name": "job_run_id",
            "schema": {}
          },
          {
            "description": "ID of the Project",
            "in": "query",
            "name": "project_id",
            "schema": {}
          },
          {
            "description": "Class of the Task",
            "in": "query",
            "name": "task_class",
            "schema": { "type": "string" }
          },
          {
            "description": "Status of the Task",
            "in": "query",
            "name": "task_status",
            "schema": { "type": "string" }
          },
          {
            "description": "Number of retries for the Task",
            "in": "query",
            "name": "task_retries",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "URL of the Task",
            "in": "query",
            "name": "task_url",
            "schema": { "type": "string" }
          },
          {
            "description": "Whether JavaScript is enabled for the Task",
            "in": "query",
            "name": "task_js_rendering",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Number of bytes for the Task",
            "in": "query",
            "name": "task_bytes",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Duration of the Task",
            "in": "query",
            "name": "task_duration",
            "schema": { "type": "number" }
          },
          {
            "description": "Number of captchas for the Task",
            "in": "query",
            "name": "task_captchas",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Token cost of the Task",
            "in": "query",
            "name": "task_token_cost",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Status code of the Task",
            "in": "query",
            "name": "task_status_code",
            "schema": { "format": "int64", "type": "integer" }
          },
          {
            "description": "Datetime the Task was created",
            "in": "query",
            "name": "task_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Task was scheduled",
            "in": "query",
            "name": "task_scheduled_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Task was last updated",
            "in": "query",
            "name": "task_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TaskSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Task search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Tasks",
        "tags": ["Task"]
      }
    },
    "/private/user/{organization_id}/task_summary/retrieve/{task_summary_id}": {
      "get": {
        "description": "Retrieves a specific Task Summary based on the provided ID for the current user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Task Summary to retrieve",
            "in": "path",
            "name": "task_summary_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TaskSummarySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Task Summary Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Task Summary Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Task Summary",
        "tags": ["Task Summary"]
      }
    },
    "/private/user/{organization_id}/task_summary/search": {
      "get": {
        "description": "Search task summary entries on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Task Summary",
            "in": "query",
            "name": "task_summary_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain associated with the Task Summary",
            "in": "query",
            "name": "task_summary_domain",
            "schema": { "type": "string" }
          },
          {
            "description": "Number of successful requests in the Task Summary",
            "in": "query",
            "name": "task_summary_successful",
            "schema": { "type": "integer" }
          },
          {
            "description": "Number of error requests in the Task Summary",
            "in": "query",
            "name": "task_summary_error",
            "schema": { "type": "integer" }
          },
          {
            "description": "Period of the Task Summary",
            "in": "query",
            "name": "task_summary_period",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Creation datetime of the Task Summary",
            "in": "query",
            "name": "task_summary_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Last update datetime of the Task Summary",
            "in": "query",
            "name": "task_summary_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TaskSummarySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Task Summary search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Task Summary",
        "tags": ["Task Summary"]
      }
    },
    "/private/user/{organization_id}/template/create": {
      "post": {
        "description": "Allows a user to create a new template for their organization. The system limits the number of active templates per organization. If the maximum number is reached, the user must remove an existing template before they can create a new one.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "template_description": {
                    "description": "Description for the template.",
                    "maxLength": 64,
                    "type": "string"
                  },
                  "template_name": {
                    "description": "Name for the template.",
                    "maxLength": 64,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The template creation details.",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "created": [123],
                  "message": "template successfully created."
                },
                "schema": {
                  "properties": {
                    "created": {
                      "items": {
                        "description": "A list containing the ID of the created template.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message": {
                      "description": "A message indicating the success of the operation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "template Successfully Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnprocessableResponse" }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity - Max templates Reached"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Create template",
        "tags": ["Template"],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/{organization_id}/template/delete/{template_id}": {
      "delete": {
        "description": "Allows a user to delete an existing Template associated with their organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Template to delete.",
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateSuccessfulDeleteResponse"
                }
              }
            },
            "description": "Template Successfully Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Not Found - No Template with this ID"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Delete Template",
        "tags": ["Template"]
      }
    },
    "/private/user/{organization_id}/template/retrieve/{template_id}": {
      "get": {
        "description": "Retrieves a specific Template based on the provided ID for the current user's organization.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Template to retrieve",
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TemplateSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Template Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Template",
        "tags": ["Template"]
      }
    },
    "/private/user/{organization_id}/template/search": {
      "get": {
        "description": "Search Template on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the Organization",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Template",
            "in": "query",
            "name": "template_id",
            "schema": {}
          },
          {
            "description": "Name of the template",
            "in": "query",
            "name": "template_name",
            "schema": { "type": "string" }
          },
          {
            "description": "Description of the template",
            "in": "query",
            "name": "template_description",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Template was created",
            "in": "query",
            "name": "template_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Template was last updated",
            "in": "query",
            "name": "template_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TemplateSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Template search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Template",
        "tags": ["Template"]
      }
    },
    "/private/user/{organization_id}/token_ledger/retrieve/{token_ledger_id}": {
      "get": {
        "description": "Retrieves a specific token Ledger based on the provided ID for the current users account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the token Ledger to retrieve",
            "in": "path",
            "name": "token_ledger_id",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenLedgerSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful token Ledger Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "token Ledger Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve token Ledger",
        "tags": ["Token Ledger"]
      }
    },
    "/private/user/{organization_id}/token_ledger/search": {
      "get": {
        "description": "Search for entries in the Token Ledger using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to which the invoice belongs.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "Unique identifier of the Token Ledger entry.",
            "in": "query",
            "name": "token_ledger_id",
            "schema": {}
          },
          {
            "description": "Service identifier associated with the ledger entry.",
            "in": "query",
            "name": "service_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Adjustment identifier associated with the ledger entry.",
            "in": "query",
            "name": "service_adjustment_id",
            "schema": { "type": "integer" }
          },
          {
            "description": "Reason for the ledger entry.",
            "in": "query",
            "name": "token_ledger_reason",
            "schema": { "type": "string" }
          },
          {
            "description": "The date of the ledger entry.",
            "in": "query",
            "name": "token_ledger_period_date",
            "schema": { "type": "string" }
          },
          {
            "description": "Creation datetime of the ledger entry.",
            "in": "query",
            "name": "token_ledger_creation_datetime",
            "schema": { "type": "string" }
          },
          {
            "description": "Last update datetime of the ledger entry.",
            "in": "query",
            "name": "token_ledger_last_update_datetime",
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenLedgerSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Token Ledger search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestResponse" }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Token Ledger",
        "tags": ["Token Ledger"]
      }
    },
    "/private/user/{organization_id}/transaction/retrieve/{transaction_id}": {
      "get": {
        "description": "Retrieves a specific Transaction based on the provided ID for the current user's account. Provides details about any specific financial or data movement associated with the user's account.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve transaction analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Transaction to retrieve",
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TransactionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Transaction Retrieve"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [{ "$ref": "#/components/schemas/NotFoundResponse" }]
                }
              }
            },
            "description": "Transaction Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Retrieve Transaction",
        "tags": ["Transaction"]
      }
    },
    "/private/user/{organization_id}/transaction/search": {
      "get": {
        "description": "Search Transactions on the user account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          { "$ref": "#/components/parameters/ClientIPAddress" },
          { "$ref": "#/components/parameters/ClientUserAgent" },
          {
            "description": "ID of the organization to retrieve transaction analytics for.",
            "in": "path",
            "name": "organization_id",
            "required": true,
            "schema": {}
          },
          {
            "description": "ID of the Transaction",
            "in": "query",
            "name": "transaction_id",
            "schema": { "type": "string" }
          },
          {
            "description": "ID of the associated Invoice",
            "in": "query",
            "name": "invoice_id",
            "schema": { "type": "string" }
          },
          {
            "description": "Status of the Transaction",
            "in": "query",
            "name": "transaction_status",
            "schema": {
              "enum": ["processing", "succeeded", "failed", "refunded"],
              "type": "string"
            }
          },
          {
            "description": "Amount of the Transaction",
            "in": "query",
            "name": "transaction_amount",
            "schema": { "format": "float", "type": "number" }
          },
          {
            "description": "Reason for Transaction refund, if applicable",
            "in": "query",
            "name": "transaction_refund_reason",
            "schema": { "type": "string" }
          },
          {
            "description": "Method used for the Transaction (e.g., cryptocurrency)",
            "in": "query",
            "name": "transaction_method",
            "schema": { "enum": ["card", "cryptocurrency"], "type": "string" }
          },
          {
            "description": "Processor used for the Transaction",
            "in": "query",
            "name": "transaction_processor",
            "schema": {
              "enum": ["stripe", "bitpay", "coinpayments"],
              "type": "string"
            }
          },
          {
            "description": "Currency of the Transaction (e.g., XRP)",
            "in": "query",
            "name": "transaction_currency",
            "schema": { "type": "string" }
          },
          {
            "description": "Datetime the Transaction was created",
            "in": "query",
            "name": "transaction_creation_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "description": "Datetime the Transaction was last updated",
            "in": "query",
            "name": "transaction_last_update_datetime",
            "schema": { "format": "date-time", "type": "string" }
          },
          { "$ref": "#/components/parameters/per_page" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/sort_by" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TransactionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            },
            "description": "Successful Transaction search"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/BadRequestResponse" }
                  ]
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/UnauthorizedResponse" }
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/MethodNotAllowedResponse" }
                  ]
                }
              }
            },
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServer" }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "summary": "Search Transactions",
        "tags": ["Transaction"]
      }
    },
    "/private/utility/analytics/fingerprint-test/chrome": {
      "post": {
        "operationId": "chrome_private_utility_analytics_fingerprint_test_chrome_post",
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" }
        },
        "summary": "Chrome",
        "tags": ["Private", "Utility", "Analytics"]
      }
    },
    "/private/utility/analytics/fingerprint-test/fp": {
      "post": {
        "operationId": "fp_private_utility_analytics_fingerprint_test_fp_post",
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" }
        },
        "summary": "Fp",
        "tags": ["Private", "Utility", "Analytics"]
      }
    },
    "/private/utility/analytics/fingerprint-test/query": {
      "post": {
        "operationId": "query_private_utility_analytics_fingerprint_test_query_post",
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" }
        },
        "summary": "Query",
        "tags": ["Private", "Utility", "Analytics"]
      }
    },
    "/private/utility/notify/output": {
      "post": {
        "operationId": "output_private_utility_notify_output_post",
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" },
          "422": { "content": {}, "description": "Validation Error" }
        },
        "summary": "Output",
        "tags": ["Private", "Utility", "Notify"]
      }
    },
    "/private/utility/proxy/generate": {
      "get": {
        "operationId": "generate_private_utility_proxy_generate_get",
        "parameters": [
          { "in": "query", "name": "country_id", "schema": {} },
          { "in": "query", "name": "proxy_type", "schema": {} }
        ],
        "responses": {
          "200": { "content": {}, "description": "Successful Response" },
          "404": { "content": {}, "description": "Not found" },
          "422": { "content": {}, "description": "Validation Error" }
        },
        "summary": "Generate",
        "tags": ["Private", "Utility", "Proxy"]
      }
    }
  },
  "servers": [{ "url": "https://api.bloxed.com/1.0/" }],
  "x-original-swagger-version": "2.0",
  "x-tagGroups": [
    { "name": "Authorization", "tags": ["Authorization"] },
    {
      "name": "Account Management",
      "tags": ["Organization", "User", "Notification", "API Key"]
    },
    { "name": "Scraping", "tags": ["Task", "Job", "Job Run", "Job Target"] },
    {
      "name": "Services",
      "tags": ["Service", "Service Adjustment", "Subscription Schedule"]
    },
    { "name": "Token", "tags": ["Token", "Token Ledger"] },
    { "name": "Template", "tags": ["Template"] },
    {
      "name": "Fingerprint",
      "tags": ["Device Fingerprint", "Geo Fingerprint"]
    },
    { "name": "Egress", "tags": ["Egress Configuration", "Egress Module"] },
    {
      "name": "Analytics & Observability",
      "tags": ["Task Summary", "API Request"]
    },
    {
      "name": "Payments",
      "tags": [
        "Invoice",
        "Transaction",
        "Balance Transaction",
        "Payment Method"
      ]
    },
    { "name": "Checkout", "tags": ["Checkout", "Cart", "Product Catalog"] },
    { "name": "Utilities", "tags": ["Utilities"] },
    {
      "name": "Location Selection",
      "tags": ["Continent", "Country", "Subdivision", "City"]
    }
  ],
  "x-topics": []
}
